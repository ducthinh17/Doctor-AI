"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.oauthStrategyToAuthProvider = exports.authenticate = exports.preAuthenticate = exports.getUserPhoneNumber = exports.getUserEmail = exports.getAuthenticatedUser = exports.logoutAuthenticatedUser = void 0;
const platform_js_1 = require("../../../../utils/platform.js");
const type_js_1 = require("./type.js");
const ewsSDKCache = new WeakMap();
/**
 * @internal
 */
async function getInAppWalletConnector(client) {
    if (ewsSDKCache.has(client)) {
        return ewsSDKCache.get(client);
    }
    let ewSDK;
    if ((0, platform_js_1.isBrowser)()) {
        const { InAppWebConnector } = await Promise.resolve().then(() => require("../../web/lib/web-connector.js"));
        ewSDK = new InAppWebConnector({
            client: client,
        });
    }
    else if ((0, platform_js_1.isReactNative)()) {
        const { InAppNativeConnector, } = require("../../native/native-connector.js");
        ewSDK = new InAppNativeConnector({
            client,
        });
    }
    else {
        throw new Error("Unsupported platform");
    }
    ewsSDKCache.set(client, ewSDK);
    return ewSDK;
}
/**
 * @internal
 */
async function logoutAuthenticatedUser(options) {
    const ewSDK = await getInAppWalletConnector(options.client);
    return ewSDK.logout();
}
exports.logoutAuthenticatedUser = logoutAuthenticatedUser;
/**
 * Retrieves the authenticated user for the active in-app wallet.
 * @param options - The arguments for retrieving the authenticated user.
 * @returns The authenticated user if logged in and wallet initialized, otherwise undefined.
 * @example
 * ```ts
 * import { getAuthenticatedUser } from "thirdweb/wallets/in-app";
 *
 * const user = await getAuthenticatedUser({ client });
 * if (user) {
 *  console.log(user.walletAddress);
 * }
 * ```
 * @wallet
 */
async function getAuthenticatedUser(options) {
    const { client } = options;
    const ewSDK = await getInAppWalletConnector(client);
    const user = await ewSDK.getUser();
    switch (user.status) {
        case type_js_1.UserWalletStatus.LOGGED_IN_WALLET_INITIALIZED: {
            return user;
        }
    }
    return undefined;
}
exports.getAuthenticatedUser = getAuthenticatedUser;
/**
 * Retrieves the authenticated user email for the active in-app wallet.
 * @param options - The arguments for retrieving the authenticated user.
 * @returns The authenticated user email if logged in and wallet initialized, otherwise undefined.
 * @example
 * ```ts
 * import { getUserEmail } from "thirdweb/wallets/in-app";
 *
 * const email = await getUserEmail({ client });
 * console.log(email);
 * ```
 * @wallet
 */
async function getUserEmail(options) {
    const user = await getAuthenticatedUser(options);
    if (user && "email" in user.authDetails) {
        return user.authDetails.email;
    }
    return undefined;
}
exports.getUserEmail = getUserEmail;
/**
 * Retrieves the authenticated user phone number for the active embedded wallet.
 * @param options - The arguments for retrieving the authenticated user.
 * @returns The authenticated user phone number if authenticated with phone number, otherwise undefined.
 * @example
 * ```ts
 * import { getUserPhoneNumber } from "thirdweb/wallets/embedded";
 *
 * const phoneNumber = await getUserPhoneNumber({ client });
 * console.log(phoneNumber);
 * ```
 * @wallet
 */
async function getUserPhoneNumber(options) {
    const user = await getAuthenticatedUser(options);
    if (user && "phoneNumber" in user.authDetails) {
        return user.authDetails.phoneNumber;
    }
    return undefined;
}
exports.getUserPhoneNumber = getUserPhoneNumber;
/**
 * Pre-authenticates the user based on the provided authentication strategy.
 * @param args - The arguments required for pre-authentication.
 * @returns A promise that resolves to the pre-authentication result.
 * @throws An error if the provided authentication strategy doesn't require pre-authentication.
 * @example
 * ```ts
 * import { preAuthenticate } from "thirdweb/wallets/in-app";
 *
 * const result = await preAuthenticate({
 *  client,
 *  strategy: "email",
 *  email: "example@example.org",
 * });
 * ```
 * @wallet
 */
async function preAuthenticate(args) {
    const ewSDK = await getInAppWalletConnector(args.client);
    return ewSDK.preAuthenticate(args);
}
exports.preAuthenticate = preAuthenticate;
/**
 * Authenticates the user based on the provided authentication arguments.
 * @param args - The authentication arguments.
 * @returns A promise that resolves to the authentication result.
 * @example
 * ```ts
 * import { authenticate } from "thirdweb/wallets/in-app";
 *
 * const result = await authenticate({
 *  client,
 *  strategy: "email",
 *  email: "example@example.org",
 *  verificationCode: "123456",
 * });
 * ```
 * @wallet
 */
async function authenticate(args) {
    const ewSDK = await getInAppWalletConnector(args.client);
    return ewSDK.authenticate(args);
}
exports.authenticate = authenticate;
exports.oauthStrategyToAuthProvider = {
    google: type_js_1.AuthProvider.GOOGLE,
    facebook: type_js_1.AuthProvider.FACEBOOK,
    apple: type_js_1.AuthProvider.APPLE,
};
//# sourceMappingURL=index.js.map