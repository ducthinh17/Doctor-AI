"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_node_modules_thirdweb_dist_esm_react_web_ui_components_QRCode_QRCodeRenderer_js"],{

/***/ "(app-pages-browser)/./node_modules/thirdweb/dist/esm/react/web/ui/components/QRCode/QRCodeRenderer.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/thirdweb/dist/esm/react/web/ui/components/QRCode/QRCodeRenderer.js ***!
  \*****************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var uqr__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! uqr */ \"(app-pages-browser)/./node_modules/uqr/dist/index.mjs\");\n/* __next_internal_client_entry_do_not_use__ default auto */ var _s = $RefreshSig$();\n\n\n\n/**\n * @internal\n */ function QRCodeRenderer(param) {\n    let { ecl = \"M\", size: sizeProp = 200, uri, clearSize = 0, image, imageBackground = \"transparent\" } = param;\n    _s();\n    const logoSize = clearSize;\n    const size = sizeProp - 10 * 2;\n    const dots = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>{\n        const dotsArray = [];\n        const matrix = (0,uqr__WEBPACK_IMPORTED_MODULE_2__.encode)(uri, {\n            ecc: ecl,\n            border: 0\n        }).data;\n        const cellSize = size / matrix.length;\n        const qrList = [\n            {\n                x: 0,\n                y: 0\n            },\n            {\n                x: 1,\n                y: 0\n            },\n            {\n                x: 0,\n                y: 1\n            }\n        ];\n        for (const { x, y } of qrList){\n            const x1 = (matrix.length - 7) * cellSize * x;\n            const y1 = (matrix.length - 7) * cellSize * y;\n            for(let i = 0; i < 3; i++){\n                dotsArray.push((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"rect\", {\n                    fill: i % 2 !== 0 ? \"var(--ck-qr-background, var(--ck-body-background))\" : \"var(--ck-qr-dot-color)\",\n                    rx: (i - 2) * -5 + (i === 0 ? 2 : 3),\n                    ry: (i - 2) * -5 + (i === 0 ? 2 : 3),\n                    width: cellSize * (7 - i * 2),\n                    height: cellSize * (7 - i * 2),\n                    x: x1 + cellSize * i,\n                    y: y1 + cellSize * i\n                }, \"\".concat(i, \"-\").concat(x, \"-\").concat(y)));\n            }\n        }\n        if (image) {\n            const x1 = (matrix.length - 7) * cellSize * 1;\n            const y1 = (matrix.length - 7) * cellSize * 1;\n            dotsArray.push((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n                children: [\n                    (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"rect\", {\n                        fill: imageBackground,\n                        rx: (0 - 2) * -5 + 2,\n                        ry: (0 - 2) * -5 + 2,\n                        width: cellSize * (7 - 0 * 2),\n                        height: cellSize * (7 - 0 * 2),\n                        x: x1 + cellSize * 0,\n                        y: y1 + cellSize * 0\n                    }),\n                    (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"foreignObject\", {\n                        width: cellSize * (7 - 0 * 2),\n                        height: cellSize * (7 - 0 * 2),\n                        x: x1 + cellSize * 0,\n                        y: y1 + cellSize * 0,\n                        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                            style: {\n                                borderRadius: (0 - 2) * -5 + 2,\n                                overflow: \"hidden\"\n                            },\n                            children: image\n                        })\n                    })\n                ]\n            }));\n        }\n        const clearArenaSize = Math.floor((logoSize + 25) / cellSize);\n        const matrixMiddleStart = matrix.length / 2 - clearArenaSize / 2;\n        const matrixMiddleEnd = matrix.length / 2 + clearArenaSize / 2 - 1;\n        matrix.forEach((row, i)=>{\n            row.forEach((_, j)=>{\n                var _matrix_i;\n                if ((_matrix_i = matrix[i]) === null || _matrix_i === void 0 ? void 0 : _matrix_i[j]) {\n                    // Do not render dots under position squares\n                    if (!(i < 7 && j < 7 || i > matrix.length - 8 && j < 7 || i < 7 && j > matrix.length - 8)) {\n                        //if (image && i > matrix.length - 9 && j > matrix.length - 9) return;\n                        if (image || !(i > matrixMiddleStart && i < matrixMiddleEnd && j > matrixMiddleStart && j < matrixMiddleEnd)) {\n                            dotsArray.push((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"circle\", {\n                                cx: i * cellSize + cellSize / 2,\n                                cy: j * cellSize + cellSize / 2,\n                                fill: \"var(--ck-qr-dot-color)\",\n                                r: cellSize / 3\n                            }, \"circle-\".// biome-ignore lint/suspicious/noArrayIndexKey: its the only thing available for the key here\n                            concat(i, \"-\").concat(j)));\n                        }\n                    }\n                }\n            });\n        });\n        return dotsArray;\n    }, [\n        ecl,\n        image,\n        imageBackground,\n        logoSize,\n        size,\n        uri\n    ]);\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"svg\", {\n        height: size,\n        width: size,\n        viewBox: \"0 0 \".concat(size, \" \").concat(size),\n        style: {\n            width: size,\n            height: size\n        },\n        role: \"presentation\",\n        children: [\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"rect\", {\n                fill: \"transparent\",\n                height: size,\n                width: size\n            }),\n            dots\n        ]\n    });\n}\n_s(QRCodeRenderer, \"fYWJsCMmiifAQm2+Zt8/HdZwyoE=\");\n_c = QRCodeRenderer;\n/* harmony default export */ __webpack_exports__[\"default\"] = (QRCodeRenderer); //# sourceMappingURL=QRCodeRenderer.js.map\nvar _c;\n$RefreshReg$(_c, \"QRCodeRenderer\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/thirdweb/dist/esm/react/web/ui/components/QRCode/QRCodeRenderer.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/uqr/dist/index.mjs":
/*!*****************************************!*\
  !*** ./node_modules/uqr/dist/index.mjs ***!
  \*****************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   QrCodeDataType: function() { return /* binding */ QrCodeDataType; },\n/* harmony export */   encode: function() { return /* binding */ encode; },\n/* harmony export */   renderANSI: function() { return /* binding */ renderANSI; },\n/* harmony export */   renderSVG: function() { return /* binding */ renderSVG; },\n/* harmony export */   renderUnicode: function() { return /* binding */ renderUnicode; },\n/* harmony export */   renderUnicodeCompact: function() { return /* binding */ renderUnicodeCompact; }\n/* harmony export */ });\nvar QrCodeDataType = /* @__PURE__ */ ((QrCodeDataType2)=>{\n    QrCodeDataType2[QrCodeDataType2[\"Border\"] = -1] = \"Border\";\n    QrCodeDataType2[QrCodeDataType2[\"Data\"] = 0] = \"Data\";\n    QrCodeDataType2[QrCodeDataType2[\"Function\"] = 1] = \"Function\";\n    QrCodeDataType2[QrCodeDataType2[\"Position\"] = 2] = \"Position\";\n    QrCodeDataType2[QrCodeDataType2[\"Timing\"] = 3] = \"Timing\";\n    QrCodeDataType2[QrCodeDataType2[\"Alignment\"] = 4] = \"Alignment\";\n    return QrCodeDataType2;\n})(QrCodeDataType || {});\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __publicField = (obj, key, value)=>{\n    __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n    return value;\n};\nconst LOW = [\n    0,\n    1\n];\nconst MEDIUM = [\n    1,\n    0\n];\nconst QUARTILE = [\n    2,\n    3\n];\nconst HIGH = [\n    3,\n    2\n];\nconst EccMap = {\n    L: LOW,\n    M: MEDIUM,\n    Q: QUARTILE,\n    H: HIGH\n};\nconst NUMERIC_REGEX = /^[0-9]*$/;\nconst ALPHANUMERIC_REGEX = /^[A-Z0-9 $%*+.\\/:-]*$/;\nconst ALPHANUMERIC_CHARSET = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ $%*+-./:\";\nconst MIN_VERSION = 1;\nconst MAX_VERSION = 40;\nconst PENALTY_N1 = 3;\nconst PENALTY_N2 = 3;\nconst PENALTY_N3 = 40;\nconst PENALTY_N4 = 10;\nconst ECC_CODEWORDS_PER_BLOCK = [\n    // Version: (note that index 0 is for padding, and is set to an illegal value)\n    // 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40    Error correction level\n    [\n        -1,\n        7,\n        10,\n        15,\n        20,\n        26,\n        18,\n        20,\n        24,\n        30,\n        18,\n        20,\n        24,\n        26,\n        30,\n        22,\n        24,\n        28,\n        30,\n        28,\n        28,\n        28,\n        28,\n        30,\n        30,\n        26,\n        28,\n        30,\n        30,\n        30,\n        30,\n        30,\n        30,\n        30,\n        30,\n        30,\n        30,\n        30,\n        30,\n        30,\n        30\n    ],\n    // Low\n    [\n        -1,\n        10,\n        16,\n        26,\n        18,\n        24,\n        16,\n        18,\n        22,\n        22,\n        26,\n        30,\n        22,\n        22,\n        24,\n        24,\n        28,\n        28,\n        26,\n        26,\n        26,\n        26,\n        28,\n        28,\n        28,\n        28,\n        28,\n        28,\n        28,\n        28,\n        28,\n        28,\n        28,\n        28,\n        28,\n        28,\n        28,\n        28,\n        28,\n        28,\n        28\n    ],\n    // Medium\n    [\n        -1,\n        13,\n        22,\n        18,\n        26,\n        18,\n        24,\n        18,\n        22,\n        20,\n        24,\n        28,\n        26,\n        24,\n        20,\n        30,\n        24,\n        28,\n        28,\n        26,\n        30,\n        28,\n        30,\n        30,\n        30,\n        30,\n        28,\n        30,\n        30,\n        30,\n        30,\n        30,\n        30,\n        30,\n        30,\n        30,\n        30,\n        30,\n        30,\n        30,\n        30\n    ],\n    // Quartile\n    [\n        -1,\n        17,\n        28,\n        22,\n        16,\n        22,\n        28,\n        26,\n        26,\n        24,\n        28,\n        24,\n        28,\n        22,\n        24,\n        24,\n        30,\n        28,\n        28,\n        26,\n        28,\n        30,\n        24,\n        30,\n        30,\n        30,\n        30,\n        30,\n        30,\n        30,\n        30,\n        30,\n        30,\n        30,\n        30,\n        30,\n        30,\n        30,\n        30,\n        30,\n        30\n    ]\n];\nconst NUM_ERROR_CORRECTION_BLOCKS = [\n    // Version: (note that index 0 is for padding, and is set to an illegal value)\n    // 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40    Error correction level\n    [\n        -1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        2,\n        2,\n        2,\n        2,\n        4,\n        4,\n        4,\n        4,\n        4,\n        6,\n        6,\n        6,\n        6,\n        7,\n        8,\n        8,\n        9,\n        9,\n        10,\n        12,\n        12,\n        12,\n        13,\n        14,\n        15,\n        16,\n        17,\n        18,\n        19,\n        19,\n        20,\n        21,\n        22,\n        24,\n        25\n    ],\n    // Low\n    [\n        -1,\n        1,\n        1,\n        1,\n        2,\n        2,\n        4,\n        4,\n        4,\n        5,\n        5,\n        5,\n        8,\n        9,\n        9,\n        10,\n        10,\n        11,\n        13,\n        14,\n        16,\n        17,\n        17,\n        18,\n        20,\n        21,\n        23,\n        25,\n        26,\n        28,\n        29,\n        31,\n        33,\n        35,\n        37,\n        38,\n        40,\n        43,\n        45,\n        47,\n        49\n    ],\n    // Medium\n    [\n        -1,\n        1,\n        1,\n        2,\n        2,\n        4,\n        4,\n        6,\n        6,\n        8,\n        8,\n        8,\n        10,\n        12,\n        16,\n        12,\n        17,\n        16,\n        18,\n        21,\n        20,\n        23,\n        23,\n        25,\n        27,\n        29,\n        34,\n        34,\n        35,\n        38,\n        40,\n        43,\n        45,\n        48,\n        51,\n        53,\n        56,\n        59,\n        62,\n        65,\n        68\n    ],\n    // Quartile\n    [\n        -1,\n        1,\n        1,\n        2,\n        4,\n        4,\n        4,\n        5,\n        6,\n        8,\n        8,\n        11,\n        11,\n        16,\n        16,\n        18,\n        16,\n        19,\n        21,\n        25,\n        25,\n        25,\n        34,\n        30,\n        32,\n        35,\n        37,\n        40,\n        42,\n        45,\n        48,\n        51,\n        54,\n        57,\n        60,\n        63,\n        66,\n        70,\n        74,\n        77,\n        81\n    ]\n];\nclass QrCode {\n    /* -- Accessor methods -- */ // Returns the color of the module (pixel) at the given coordinates, which is false\n    // for light or true for dark. The top left corner has the coordinates (x=0, y=0).\n    // If the given coordinates are out of bounds, then false (light) is returned.\n    getModule(x, y) {\n        return x >= 0 && x < this.size && y >= 0 && y < this.size && this.modules[y][x];\n    }\n    /* -- Private helper methods for constructor: Drawing function modules -- */ // Reads this object's version field, and draws and marks all function modules.\n    drawFunctionPatterns() {\n        for(let i = 0; i < this.size; i++){\n            this.setFunctionModule(6, i, i % 2 === 0, QrCodeDataType.Timing);\n            this.setFunctionModule(i, 6, i % 2 === 0, QrCodeDataType.Timing);\n        }\n        this.drawFinderPattern(3, 3);\n        this.drawFinderPattern(this.size - 4, 3);\n        this.drawFinderPattern(3, this.size - 4);\n        const alignPatPos = this.getAlignmentPatternPositions();\n        const numAlign = alignPatPos.length;\n        for(let i = 0; i < numAlign; i++){\n            for(let j = 0; j < numAlign; j++){\n                if (!(i === 0 && j === 0 || i === 0 && j === numAlign - 1 || i === numAlign - 1 && j === 0)) this.drawAlignmentPattern(alignPatPos[i], alignPatPos[j]);\n            }\n        }\n        this.drawFormatBits(0);\n        this.drawVersion();\n    }\n    // Draws two copies of the format bits (with its own error correction code)\n    // based on the given mask and this object's error correction level field.\n    drawFormatBits(mask) {\n        const data = this.ecc[1] << 3 | mask;\n        let rem = data;\n        for(let i = 0; i < 10; i++)rem = rem << 1 ^ (rem >>> 9) * 1335;\n        const bits = (data << 10 | rem) ^ 21522;\n        for(let i = 0; i <= 5; i++)this.setFunctionModule(8, i, getBit(bits, i));\n        this.setFunctionModule(8, 7, getBit(bits, 6));\n        this.setFunctionModule(8, 8, getBit(bits, 7));\n        this.setFunctionModule(7, 8, getBit(bits, 8));\n        for(let i = 9; i < 15; i++)this.setFunctionModule(14 - i, 8, getBit(bits, i));\n        for(let i = 0; i < 8; i++)this.setFunctionModule(this.size - 1 - i, 8, getBit(bits, i));\n        for(let i = 8; i < 15; i++)this.setFunctionModule(8, this.size - 15 + i, getBit(bits, i));\n        this.setFunctionModule(8, this.size - 8, true);\n    }\n    // Draws two copies of the version bits (with its own error correction code),\n    // based on this object's version field, iff 7 <= version <= 40.\n    drawVersion() {\n        if (this.version < 7) return;\n        let rem = this.version;\n        for(let i = 0; i < 12; i++)rem = rem << 1 ^ (rem >>> 11) * 7973;\n        const bits = this.version << 12 | rem;\n        for(let i = 0; i < 18; i++){\n            const color = getBit(bits, i);\n            const a = this.size - 11 + i % 3;\n            const b = Math.floor(i / 3);\n            this.setFunctionModule(a, b, color);\n            this.setFunctionModule(b, a, color);\n        }\n    }\n    // Draws a 9*9 finder pattern including the border separator,\n    // with the center module at (x, y). Modules can be out of bounds.\n    drawFinderPattern(x, y) {\n        for(let dy = -4; dy <= 4; dy++){\n            for(let dx = -4; dx <= 4; dx++){\n                const dist = Math.max(Math.abs(dx), Math.abs(dy));\n                const xx = x + dx;\n                const yy = y + dy;\n                if (xx >= 0 && xx < this.size && yy >= 0 && yy < this.size) this.setFunctionModule(xx, yy, dist !== 2 && dist !== 4, QrCodeDataType.Position);\n            }\n        }\n    }\n    // Draws a 5*5 alignment pattern, with the center module\n    // at (x, y). All modules must be in bounds.\n    drawAlignmentPattern(x, y) {\n        for(let dy = -2; dy <= 2; dy++){\n            for(let dx = -2; dx <= 2; dx++){\n                this.setFunctionModule(x + dx, y + dy, Math.max(Math.abs(dx), Math.abs(dy)) !== 1, QrCodeDataType.Alignment);\n            }\n        }\n    }\n    // Sets the color of a module and marks it as a function module.\n    // Only used by the constructor. Coordinates must be in bounds.\n    setFunctionModule(x, y, isDark) {\n        let type = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : QrCodeDataType.Function;\n        this.modules[y][x] = isDark;\n        this.types[y][x] = type;\n    }\n    /* -- Private helper methods for constructor: Codewords and masking -- */ // Returns a new byte string representing the given data with the appropriate error correction\n    // codewords appended to it, based on this object's version and error correction level.\n    addEccAndInterleave(data) {\n        const ver = this.version;\n        const ecl = this.ecc;\n        if (data.length !== getNumDataCodewords(ver, ecl)) throw new RangeError(\"Invalid argument\");\n        const numBlocks = NUM_ERROR_CORRECTION_BLOCKS[ecl[0]][ver];\n        const blockEccLen = ECC_CODEWORDS_PER_BLOCK[ecl[0]][ver];\n        const rawCodewords = Math.floor(getNumRawDataModules(ver) / 8);\n        const numShortBlocks = numBlocks - rawCodewords % numBlocks;\n        const shortBlockLen = Math.floor(rawCodewords / numBlocks);\n        const blocks = [];\n        const rsDiv = reedSolomonComputeDivisor(blockEccLen);\n        for(let i = 0, k = 0; i < numBlocks; i++){\n            const dat = data.slice(k, k + shortBlockLen - blockEccLen + (i < numShortBlocks ? 0 : 1));\n            k += dat.length;\n            const ecc = reedSolomonComputeRemainder(dat, rsDiv);\n            if (i < numShortBlocks) dat.push(0);\n            blocks.push(dat.concat(ecc));\n        }\n        const result = [];\n        for(let i = 0; i < blocks[0].length; i++){\n            blocks.forEach((block, j)=>{\n                if (i !== shortBlockLen - blockEccLen || j >= numShortBlocks) result.push(block[i]);\n            });\n        }\n        return result;\n    }\n    // Draws the given sequence of 8-bit codewords (data and error correction) onto the entire\n    // data area of this QR Code. Function modules need to be marked off before this is called.\n    drawCodewords(data) {\n        if (data.length !== Math.floor(getNumRawDataModules(this.version) / 8)) throw new RangeError(\"Invalid argument\");\n        let i = 0;\n        for(let right = this.size - 1; right >= 1; right -= 2){\n            if (right === 6) right = 5;\n            for(let vert = 0; vert < this.size; vert++){\n                for(let j = 0; j < 2; j++){\n                    const x = right - j;\n                    const upward = (right + 1 & 2) === 0;\n                    const y = upward ? this.size - 1 - vert : vert;\n                    if (!this.types[y][x] && i < data.length * 8) {\n                        this.modules[y][x] = getBit(data[i >>> 3], 7 - (i & 7));\n                        i++;\n                    }\n                }\n            }\n        }\n    }\n    // XORs the codeword modules in this QR Code with the given mask pattern.\n    // The function modules must be marked and the codeword bits must be drawn\n    // before masking. Due to the arithmetic of XOR, calling applyMask() with\n    // the same mask value a second time will undo the mask. A final well-formed\n    // QR Code needs exactly one (not zero, two, etc.) mask applied.\n    applyMask(mask) {\n        if (mask < 0 || mask > 7) throw new RangeError(\"Mask value out of range\");\n        for(let y = 0; y < this.size; y++){\n            for(let x = 0; x < this.size; x++){\n                let invert;\n                switch(mask){\n                    case 0:\n                        invert = (x + y) % 2 === 0;\n                        break;\n                    case 1:\n                        invert = y % 2 === 0;\n                        break;\n                    case 2:\n                        invert = x % 3 === 0;\n                        break;\n                    case 3:\n                        invert = (x + y) % 3 === 0;\n                        break;\n                    case 4:\n                        invert = (Math.floor(x / 3) + Math.floor(y / 2)) % 2 === 0;\n                        break;\n                    case 5:\n                        invert = x * y % 2 + x * y % 3 === 0;\n                        break;\n                    case 6:\n                        invert = (x * y % 2 + x * y % 3) % 2 === 0;\n                        break;\n                    case 7:\n                        invert = ((x + y) % 2 + x * y % 3) % 2 === 0;\n                        break;\n                    default:\n                        throw new Error(\"Unreachable\");\n                }\n                if (!this.types[y][x] && invert) this.modules[y][x] = !this.modules[y][x];\n            }\n        }\n    }\n    // Calculates and returns the penalty score based on state of this QR Code's current modules.\n    // This is used by the automatic mask choice algorithm to find the mask pattern that yields the lowest score.\n    getPenaltyScore() {\n        let result = 0;\n        for(let y = 0; y < this.size; y++){\n            let runColor = false;\n            let runX = 0;\n            const runHistory = [\n                0,\n                0,\n                0,\n                0,\n                0,\n                0,\n                0\n            ];\n            for(let x = 0; x < this.size; x++){\n                if (this.modules[y][x] === runColor) {\n                    runX++;\n                    if (runX === 5) result += PENALTY_N1;\n                    else if (runX > 5) result++;\n                } else {\n                    this.finderPenaltyAddHistory(runX, runHistory);\n                    if (!runColor) result += this.finderPenaltyCountPatterns(runHistory) * PENALTY_N3;\n                    runColor = this.modules[y][x];\n                    runX = 1;\n                }\n            }\n            result += this.finderPenaltyTerminateAndCount(runColor, runX, runHistory) * PENALTY_N3;\n        }\n        for(let x = 0; x < this.size; x++){\n            let runColor = false;\n            let runY = 0;\n            const runHistory = [\n                0,\n                0,\n                0,\n                0,\n                0,\n                0,\n                0\n            ];\n            for(let y = 0; y < this.size; y++){\n                if (this.modules[y][x] === runColor) {\n                    runY++;\n                    if (runY === 5) result += PENALTY_N1;\n                    else if (runY > 5) result++;\n                } else {\n                    this.finderPenaltyAddHistory(runY, runHistory);\n                    if (!runColor) result += this.finderPenaltyCountPatterns(runHistory) * PENALTY_N3;\n                    runColor = this.modules[y][x];\n                    runY = 1;\n                }\n            }\n            result += this.finderPenaltyTerminateAndCount(runColor, runY, runHistory) * PENALTY_N3;\n        }\n        for(let y = 0; y < this.size - 1; y++){\n            for(let x = 0; x < this.size - 1; x++){\n                const color = this.modules[y][x];\n                if (color === this.modules[y][x + 1] && color === this.modules[y + 1][x] && color === this.modules[y + 1][x + 1]) result += PENALTY_N2;\n            }\n        }\n        let dark = 0;\n        for (const row of this.modules)dark = row.reduce((sum, color)=>sum + (color ? 1 : 0), dark);\n        const total = this.size * this.size;\n        const k = Math.ceil(Math.abs(dark * 20 - total * 10) / total) - 1;\n        result += k * PENALTY_N4;\n        return result;\n    }\n    /* -- Private helper functions -- */ // Returns an ascending list of positions of alignment patterns for this version number.\n    // Each position is in the range [0,177), and are used on both the x and y axes.\n    // This could be implemented as lookup table of 40 variable-length lists of integers.\n    getAlignmentPatternPositions() {\n        if (this.version === 1) {\n            return [];\n        } else {\n            const numAlign = Math.floor(this.version / 7) + 2;\n            const step = this.version === 32 ? 26 : Math.ceil((this.version * 4 + 4) / (numAlign * 2 - 2)) * 2;\n            const result = [\n                6\n            ];\n            for(let pos = this.size - 7; result.length < numAlign; pos -= step)result.splice(1, 0, pos);\n            return result;\n        }\n    }\n    // Can only be called immediately after a light run is added, and\n    // returns either 0, 1, or 2. A helper function for getPenaltyScore().\n    finderPenaltyCountPatterns(runHistory) {\n        const n = runHistory[1];\n        const core = n > 0 && runHistory[2] === n && runHistory[3] === n * 3 && runHistory[4] === n && runHistory[5] === n;\n        return (core && runHistory[0] >= n * 4 && runHistory[6] >= n ? 1 : 0) + (core && runHistory[6] >= n * 4 && runHistory[0] >= n ? 1 : 0);\n    }\n    // Must be called at the end of a line (row or column) of modules. A helper function for getPenaltyScore().\n    finderPenaltyTerminateAndCount(currentRunColor, currentRunLength, runHistory) {\n        if (currentRunColor) {\n            this.finderPenaltyAddHistory(currentRunLength, runHistory);\n            currentRunLength = 0;\n        }\n        currentRunLength += this.size;\n        this.finderPenaltyAddHistory(currentRunLength, runHistory);\n        return this.finderPenaltyCountPatterns(runHistory);\n    }\n    // Pushes the given value to the front and drops the last value. A helper function for getPenaltyScore().\n    finderPenaltyAddHistory(currentRunLength, runHistory) {\n        if (runHistory[0] === 0) currentRunLength += this.size;\n        runHistory.pop();\n        runHistory.unshift(currentRunLength);\n    }\n    /* -- Constructor (low level) and fields -- */ // Creates a new QR Code with the given version number,\n    // error correction level, data codeword bytes, and mask number.\n    // This is a low-level API that most users should not use directly.\n    // A mid-level API is the encodeSegments() function.\n    constructor(version, ecc, dataCodewords, msk){\n        this.version = version;\n        this.ecc = ecc;\n        /* -- Fields -- */ // The width and height of this QR Code, measured in modules, between\n        // 21 and 177 (inclusive). This is equal to version * 4 + 17.\n        __publicField(this, \"size\");\n        // The index of the mask pattern used in this QR Code, which is between 0 and 7 (inclusive).\n        // Even if a QR Code is created with automatic masking requested (mask = -1),\n        // the resulting object still has a mask value between 0 and 7.\n        __publicField(this, \"mask\");\n        // The modules of this QR Code (false = light, true = dark).\n        // Immutable after constructor finishes. Accessed through getModule().\n        __publicField(this, \"modules\", []);\n        __publicField(this, \"types\", []);\n        if (version < MIN_VERSION || version > MAX_VERSION) throw new RangeError(\"Version value out of range\");\n        if (msk < -1 || msk > 7) throw new RangeError(\"Mask value out of range\");\n        this.size = version * 4 + 17;\n        const row = Array.from({\n            length: this.size\n        }, ()=>false);\n        for(let i = 0; i < this.size; i++){\n            this.modules.push(row.slice());\n            this.types.push(row.map(()=>0));\n        }\n        this.drawFunctionPatterns();\n        const allCodewords = this.addEccAndInterleave(dataCodewords);\n        this.drawCodewords(allCodewords);\n        if (msk === -1) {\n            let minPenalty = 1e9;\n            for(let i = 0; i < 8; i++){\n                this.applyMask(i);\n                this.drawFormatBits(i);\n                const penalty = this.getPenaltyScore();\n                if (penalty < minPenalty) {\n                    msk = i;\n                    minPenalty = penalty;\n                }\n                this.applyMask(i);\n            }\n        }\n        this.mask = msk;\n        this.applyMask(msk);\n        this.drawFormatBits(msk);\n    }\n}\nfunction appendBits(val, len, bb) {\n    if (len < 0 || len > 31 || val >>> len !== 0) throw new RangeError(\"Value out of range\");\n    for(let i = len - 1; i >= 0; i--)bb.push(val >>> i & 1);\n}\nfunction getBit(x, i) {\n    return (x >>> i & 1) !== 0;\n}\nclass QrSegment {\n    /* -- Methods -- */ // Returns a new copy of the data bits of this segment.\n    getData() {\n        return this.bitData.slice();\n    }\n    // Creates a new QR Code segment with the given attributes and data.\n    // The character count (numChars) must agree with the mode and the bit buffer length,\n    // but the constraint isn't checked. The given bit buffer is cloned and stored.\n    constructor(mode, numChars, bitData){\n        this.mode = mode;\n        this.numChars = numChars;\n        this.bitData = bitData;\n        if (numChars < 0) throw new RangeError(\"Invalid argument\");\n        this.bitData = bitData.slice();\n    }\n}\nconst MODE_NUMERIC = [\n    1,\n    10,\n    12,\n    14\n];\nconst MODE_ALPHANUMERIC = [\n    2,\n    9,\n    11,\n    13\n];\nconst MODE_BYTE = [\n    4,\n    8,\n    16,\n    16\n];\nfunction numCharCountBits(mode, ver) {\n    return mode[Math.floor((ver + 7) / 17) + 1];\n}\nfunction makeBytes(data) {\n    const bb = [];\n    for (const b of data)appendBits(b, 8, bb);\n    return new QrSegment(MODE_BYTE, data.length, bb);\n}\nfunction makeNumeric(digits) {\n    if (!isNumeric(digits)) throw new RangeError(\"String contains non-numeric characters\");\n    const bb = [];\n    for(let i = 0; i < digits.length;){\n        const n = Math.min(digits.length - i, 3);\n        appendBits(Number.parseInt(digits.substring(i, i + n), 10), n * 3 + 1, bb);\n        i += n;\n    }\n    return new QrSegment(MODE_NUMERIC, digits.length, bb);\n}\nfunction makeAlphanumeric(text) {\n    if (!isAlphanumeric(text)) throw new RangeError(\"String contains unencodable characters in alphanumeric mode\");\n    const bb = [];\n    let i;\n    for(i = 0; i + 2 <= text.length; i += 2){\n        let temp = ALPHANUMERIC_CHARSET.indexOf(text.charAt(i)) * 45;\n        temp += ALPHANUMERIC_CHARSET.indexOf(text.charAt(i + 1));\n        appendBits(temp, 11, bb);\n    }\n    if (i < text.length) appendBits(ALPHANUMERIC_CHARSET.indexOf(text.charAt(i)), 6, bb);\n    return new QrSegment(MODE_ALPHANUMERIC, text.length, bb);\n}\nfunction makeSegments(text) {\n    if (text === \"\") return [];\n    else if (isNumeric(text)) return [\n        makeNumeric(text)\n    ];\n    else if (isAlphanumeric(text)) return [\n        makeAlphanumeric(text)\n    ];\n    else return [\n        makeBytes(toUtf8ByteArray(text))\n    ];\n}\nfunction isNumeric(text) {\n    return NUMERIC_REGEX.test(text);\n}\nfunction isAlphanumeric(text) {\n    return ALPHANUMERIC_REGEX.test(text);\n}\nfunction getTotalBits(segs, version) {\n    let result = 0;\n    for (const seg of segs){\n        const ccbits = numCharCountBits(seg.mode, version);\n        if (seg.numChars >= 1 << ccbits) return Number.POSITIVE_INFINITY;\n        result += 4 + ccbits + seg.bitData.length;\n    }\n    return result;\n}\nfunction toUtf8ByteArray(str) {\n    str = encodeURI(str);\n    const result = [];\n    for(let i = 0; i < str.length; i++){\n        if (str.charAt(i) !== \"%\") {\n            result.push(str.charCodeAt(i));\n        } else {\n            result.push(Number.parseInt(str.substring(i + 1, i + 3), 16));\n            i += 2;\n        }\n    }\n    return result;\n}\nfunction getNumRawDataModules(ver) {\n    if (ver < MIN_VERSION || ver > MAX_VERSION) throw new RangeError(\"Version number out of range\");\n    let result = (16 * ver + 128) * ver + 64;\n    if (ver >= 2) {\n        const numAlign = Math.floor(ver / 7) + 2;\n        result -= (25 * numAlign - 10) * numAlign - 55;\n        if (ver >= 7) result -= 36;\n    }\n    return result;\n}\nfunction getNumDataCodewords(ver, ecl) {\n    return Math.floor(getNumRawDataModules(ver) / 8) - ECC_CODEWORDS_PER_BLOCK[ecl[0]][ver] * NUM_ERROR_CORRECTION_BLOCKS[ecl[0]][ver];\n}\nfunction reedSolomonComputeDivisor(degree) {\n    if (degree < 1 || degree > 255) throw new RangeError(\"Degree out of range\");\n    const result = [];\n    for(let i = 0; i < degree - 1; i++)result.push(0);\n    result.push(1);\n    let root = 1;\n    for(let i = 0; i < degree; i++){\n        for(let j = 0; j < result.length; j++){\n            result[j] = reedSolomonMultiply(result[j], root);\n            if (j + 1 < result.length) result[j] ^= result[j + 1];\n        }\n        root = reedSolomonMultiply(root, 2);\n    }\n    return result;\n}\nfunction reedSolomonComputeRemainder(data, divisor) {\n    const result = divisor.map((_)=>0);\n    for (const b of data){\n        const factor = b ^ result.shift();\n        result.push(0);\n        divisor.forEach((coef, i)=>result[i] ^= reedSolomonMultiply(coef, factor));\n    }\n    return result;\n}\nfunction reedSolomonMultiply(x, y) {\n    if (x >>> 8 !== 0 || y >>> 8 !== 0) throw new RangeError(\"Byte out of range\");\n    let z = 0;\n    for(let i = 7; i >= 0; i--){\n        z = z << 1 ^ (z >>> 7) * 285;\n        z ^= (y >>> i & 1) * x;\n    }\n    return z;\n}\nfunction encodeSegments(segs, ecl) {\n    let minVersion = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1, maxVersion = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 40, mask = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : -1, boostEcl = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : true;\n    if (!(MIN_VERSION <= minVersion && minVersion <= maxVersion && maxVersion <= MAX_VERSION) || mask < -1 || mask > 7) throw new RangeError(\"Invalid value\");\n    let version;\n    let dataUsedBits;\n    for(version = minVersion;; version++){\n        const dataCapacityBits2 = getNumDataCodewords(version, ecl) * 8;\n        const usedBits = getTotalBits(segs, version);\n        if (usedBits <= dataCapacityBits2) {\n            dataUsedBits = usedBits;\n            break;\n        }\n        if (version >= maxVersion) throw new RangeError(\"Data too long\");\n    }\n    for (const newEcl of [\n        MEDIUM,\n        QUARTILE,\n        HIGH\n    ]){\n        if (boostEcl && dataUsedBits <= getNumDataCodewords(version, newEcl) * 8) ecl = newEcl;\n    }\n    const bb = [];\n    for (const seg of segs){\n        appendBits(seg.mode[0], 4, bb);\n        appendBits(seg.numChars, numCharCountBits(seg.mode, version), bb);\n        for (const b of seg.getData())bb.push(b);\n    }\n    const dataCapacityBits = getNumDataCodewords(version, ecl) * 8;\n    appendBits(0, Math.min(4, dataCapacityBits - bb.length), bb);\n    appendBits(0, (8 - bb.length % 8) % 8, bb);\n    for(let padByte = 236; bb.length < dataCapacityBits; padByte ^= 236 ^ 17)appendBits(padByte, 8, bb);\n    const dataCodewords = Array.from({\n        length: Math.ceil(bb.length / 8)\n    }, ()=>0);\n    bb.forEach((b, i)=>dataCodewords[i >>> 3] |= b << 7 - (i & 7));\n    return new QrCode(version, ecl, dataCodewords, mask);\n}\nfunction encode(data, options) {\n    var _options_onEncoded;\n    const { ecc = \"L\", boostEcc = false, minVersion = 1, maxVersion = 40, maskPattern = -1, border = 1 } = options || {};\n    const segment = typeof data === \"string\" ? makeSegments(data) : Array.isArray(data) ? [\n        makeBytes(data)\n    ] : void 0;\n    if (!segment) throw new Error(\"uqr only supports encoding string and binary data, but got: \".concat(typeof data));\n    const qr = encodeSegments(segment, EccMap[ecc], minVersion, maxVersion, maskPattern, boostEcc);\n    const result = addBorder({\n        version: qr.version,\n        maskPattern: qr.mask,\n        size: qr.size,\n        data: qr.modules,\n        types: qr.types\n    }, border);\n    if (options === null || options === void 0 ? void 0 : options.invert) result.data = result.data.map((row)=>row.map((mod)=>!mod));\n    options === null || options === void 0 ? void 0 : (_options_onEncoded = options.onEncoded) === null || _options_onEncoded === void 0 ? void 0 : _options_onEncoded.call(options, result);\n    return result;\n}\nfunction addBorder(input) {\n    let border = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;\n    if (!border) return input;\n    const { size } = input;\n    const newSize = size + border * 2;\n    input.size = newSize;\n    input.data.forEach((row)=>{\n        for(let i = 0; i < border; i++){\n            row.unshift(false);\n            row.push(false);\n        }\n    });\n    for(let i = 0; i < border; i++){\n        input.data.unshift(Array.from({\n            length: newSize\n        }, (_)=>false));\n        input.data.push(Array.from({\n            length: newSize\n        }, (_)=>false));\n    }\n    const b = QrCodeDataType.Border;\n    input.types.forEach((row)=>{\n        for(let i = 0; i < border; i++){\n            row.unshift(b);\n            row.push(b);\n        }\n    });\n    for(let i = 0; i < border; i++){\n        input.types.unshift(Array.from({\n            length: newSize\n        }, (_)=>b));\n        input.types.push(Array.from({\n            length: newSize\n        }, (_)=>b));\n    }\n    return input;\n}\nfunction getDataAt(data, x, y) {\n    let defaults = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;\n    if (x < 0 || y < 0 || x >= data.length || y >= data.length) return defaults;\n    return data[y][x];\n}\nfunction renderUnicode(data) {\n    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    const { whiteChar = \"█\", blackChar = \"░\" } = options;\n    const result = encode(data, options);\n    return result.data.map((row)=>{\n        return row.map((mod)=>mod ? blackChar : whiteChar).join(\"\");\n    }).join(\"\\n\");\n}\nfunction renderANSI(data) {\n    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    return renderUnicode(data, {\n        ...options,\n        blackChar: \"\\x1b[40m　\\x1b[0m\",\n        whiteChar: \"\\x1b[47m　\\x1b[0m\"\n    });\n}\nfunction renderUnicodeCompact(data) {\n    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    const platte = {\n        WHITE_ALL: \"█\",\n        WHITE_BLACK: \"▀\",\n        BLACK_WHITE: \"▄\",\n        BLACK_ALL: \" \"\n    };\n    const result = encode(data, options);\n    const WHITE = false;\n    const BLACK = true;\n    const at = (x, y)=>getDataAt(result.data, x, y, true);\n    const lines = [];\n    let line = \"\";\n    for(let row = 0; row < result.size; row += 2){\n        for(let col = 0; col < result.size; col++){\n            if (at(col, row) === WHITE && at(col, row + 1) === WHITE) line += platte.WHITE_ALL;\n            else if (at(col, row) === WHITE && at(col, row + 1) === BLACK) line += platte.WHITE_BLACK;\n            else if (at(col, row) === BLACK && at(col, row + 1) === WHITE) line += platte.BLACK_WHITE;\n            else line += platte.BLACK_ALL;\n        }\n        lines.push(line);\n        line = \"\";\n    }\n    return lines.join(\"\\n\");\n}\nfunction renderSVG(data) {\n    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    const result = encode(data, options);\n    const { pixelSize = 10, whiteColor = \"white\", blackColor = \"black\" } = options;\n    const height = result.size * pixelSize;\n    const width = result.size * pixelSize;\n    let svg = '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 '.concat(width, \" \").concat(height, '\">');\n    const pathes = [];\n    for(let row = 0; row < result.size; row++){\n        for(let col = 0; col < result.size; col++){\n            const x = col * pixelSize;\n            const y = row * pixelSize;\n            if (result.data[row][col]) pathes.push(\"M\".concat(x, \",\").concat(y, \"h\").concat(pixelSize, \"v\").concat(pixelSize, \"h-\").concat(pixelSize, \"z\"));\n        }\n    }\n    svg += '<rect fill=\"'.concat(whiteColor, '\" width=\"').concat(width, '\" height=\"').concat(height, '\"/>');\n    svg += '<path fill=\"'.concat(blackColor, '\" d=\"').concat(pathes.join(\"\"), '\"/>');\n    svg += \"</svg>\";\n    return svg;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/uqr/dist/index.mjs\n"));

/***/ })

}]);