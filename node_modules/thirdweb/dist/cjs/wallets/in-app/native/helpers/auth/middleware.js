"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.postAuthUserManaged = exports.postAuth = exports.preAuth = void 0;
const type_js_1 = require("../../../core/authentication/type.js");
const errors_js_1 = require("../errors.js");
const local_js_1 = require("../storage/local.js");
const creation_js_1 = require("../wallet/creation.js");
const recoveryCode_js_1 = require("../wallet/recoveryCode.js");
const retrieval_js_1 = require("../wallet/retrieval.js");
async function preAuth(args) {
    // TODO: Add tracking here
    Promise.resolve(args);
}
exports.preAuth = preAuth;
async function postAuth({ storedToken, client, recoveryCode, }) {
    if (storedToken.shouldStoreCookieString) {
        await (0, local_js_1.setAuthTokenClient)(storedToken.cookieString, client.clientId);
    }
    await (0, local_js_1.setWallerUserDetails)({
        clientId: client.clientId,
        userId: storedToken.authDetails.userWalletId,
        email: "email" in storedToken.authDetails
            ? storedToken.authDetails.email
            : undefined, // TODO (rn) store phone number too?
    });
    if (storedToken.isNewUser) {
        const _recoveryCode = await getRecoveryCode(storedToken, client, recoveryCode);
        if (!_recoveryCode) {
            throw new Error(errors_js_1.ErrorMessages.missingRecoveryCode);
        }
        await (0, creation_js_1.setUpNewUserWallet)(_recoveryCode, client);
    }
    else {
        try {
            // existing device share
            await (0, local_js_1.getDeviceShare)(client.clientId);
        }
        catch (e) {
            const _recoveryCode = await getRecoveryCode(storedToken, client, recoveryCode);
            if (!_recoveryCode) {
                throw new Error(errors_js_1.ErrorMessages.missingRecoveryCode);
            }
            try {
                await (0, retrieval_js_1.setUpShareForNewDevice)({
                    client: client,
                    recoveryCode: _recoveryCode,
                });
            }
            catch (error) {
                console.error("Error setting up wallet on device", error);
                throw error;
            }
        }
    }
    return storedToken;
}
exports.postAuth = postAuth;
async function postAuthUserManaged(storedToken, client, password) {
    const _password = await getRecoveryCode(storedToken, client, password);
    if (storedToken.shouldStoreCookieString) {
        await (0, local_js_1.setAuthTokenClient)(storedToken.cookieString, client.clientId);
    }
    await (0, local_js_1.setWallerUserDetails)({
        clientId: client.clientId,
        userId: storedToken.authDetails.userWalletId,
        email: "email" in storedToken.authDetails
            ? storedToken.authDetails.email
            : undefined, // TODO (rn) store phone number too?
    });
    if (storedToken.isNewUser) {
        await (0, creation_js_1.setUpNewUserWallet)(_password, client);
    }
    else {
        try {
            // existing device share
            await (0, local_js_1.getDeviceShare)(client.clientId);
        }
        catch (e) {
            // trying to recreate device share from recovery code to derive wallet
            try {
                await (0, retrieval_js_1.setUpShareForNewDevice)({
                    client,
                    recoveryCode: _password,
                });
            }
            catch (error) {
                console.error("Error setting up wallet on device", error);
                throw error;
            }
        }
    }
    return storedToken;
}
exports.postAuthUserManaged = postAuthUserManaged;
async function getRecoveryCode(storedToken, client, recoveryCode) {
    if (storedToken.authDetails.recoveryShareManagement ===
        type_js_1.RecoveryShareManagement.CLOUD_MANAGED) {
        if (storedToken.authProvider === type_js_1.AuthProvider.CUSTOM_JWT ||
            storedToken.authProvider === type_js_1.AuthProvider.CUSTOM_AUTH_ENDPOINT) {
            if (!recoveryCode) {
                throw new Error(`GetRecoveryCode error: ${errors_js_1.ErrorMessages.missingRecoveryCode}`);
            }
            return recoveryCode;
        }
        try {
            const code = await (0, recoveryCode_js_1.getCognitoRecoveryPassword)(client);
            return code;
        }
        catch (e) {
            throw new Error("Something went wrong getting cognito recovery code");
        }
    }
    else {
        throw new Error("Invalid recovery share management option");
    }
}
//# sourceMappingURL=middleware.js.map