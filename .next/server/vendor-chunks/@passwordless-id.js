"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@passwordless-id";
exports.ids = ["vendor-chunks/@passwordless-id"];
exports.modules = {

/***/ "(ssr)/./node_modules/@passwordless-id/webauthn/dist/esm/authenticatorMetadata.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@passwordless-id/webauthn/dist/esm/authenticatorMetadata.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   authenticatorMetadata: () => (/* binding */ authenticatorMetadata)\n/* harmony export */ });\n/**\n * The source comes from\n * \"official\" https://mds.fidoalliance.org/\n * and the\n * \"community-driven\" https://github.com/passkeydeveloper/passkey-authenticator-aaguids\n * combined together.\n */ const authenticatorMetadata = {\n    \"00000000-0000-0000-0000-000000000000\": \"Unknown authenticator\",\n    \"0076631b-d4a0-427f-5773-0ec71c9e0279\": \"HYPR FIDO2 Authenticator\",\n    \"07a9f89c-6407-4594-9d56-621d5f1e358b\": \"NXP Semiconductros FIDO2 Conformance Testing CTAP2 Authenticator\",\n    \"08987058-cadc-4b81-b6e1-30de50dcbe96\": \"Windows Hello\",\n    \"09591fc6-9811-48f7-8f57-b9f23df6413f\": \"Pone Biometrics OFFPAD Authenticator\",\n    \"0acf3011-bc60-f375-fb53-6f05f43154e0\": \"Nymi FIDO2 Authenticator\",\n    \"0bb43545-fd2c-4185-87dd-feb0b2916ace\": \"Security Key NFC by Yubico - Enterprise Edition\",\n    \"0d9b2e56-566b-c393-2940-f821b7f15d6d\": \"Excelsecu eSecu FIDO2 Pro Security Key\",\n    \"0ea242b4-43c4-4a1b-8b17-dd6d0b6baec6\": \"Keeper\",\n    \"1105e4ed-af1d-02ff-ffff-ffffffffffff\": \"Egomet FIDO2 Authenticator for Android\",\n    \"12ded745-4bed-47d4-abaa-e713f51d6393\": \"Feitian AllinOne FIDO2 Authenticator\",\n    \"149a2021-8ef6-4133-96b8-81f8d5b7f1f5\": \"Security Key by Yubico with NFC\",\n    \"17290f1e-c212-34d0-1423-365d729f09d9\": \"Thales PIN iOS SDK\",\n    \"175cd298-83d2-4a26-b637-313c07a6434e\": \"Chunghwa Telecom FIDO2 Smart Card Authenticator\",\n    \"1c086528-58d5-f211-823c-356786e36140\": \"Atos CardOS FIDO2\",\n    \"20f0be98-9af9-986a-4b42-8eca4acb28e4\": \"Excelsecu eSecu FIDO2 Fingerprint Security Key\",\n    \"2194b428-9397-4046-8f39-007a1605a482\": \"IDPrime 931 Fido\",\n    \"23786452-f02d-4344-87ed-aaf703726881\": \"SafeNet eToken Fusion CC\",\n    \"2c0df832-92de-4be1-8412-88a8f074df4a\": \"Feitian FIDO Smart Card\",\n    \"2d3bec26-15ee-4f5d-88b2-53622490270b\": \"HID Crescendo Key V2\",\n    \"2fc0579f-8113-47ea-b116-bb5a8db9202a\": \"YubiKey 5 Series with NFC\",\n    \"2ffd6452-01da-471f-821b-ea4bf6c8676a\": \"IDPrime 941 Fido\",\n    \"30b5035e-d297-4fc1-b00b-addc96ba6a97\": \"OneSpan FIDO Touch\",\n    \"30b5035e-d297-4ff1-b00b-addc96ba6a98\": \"OneSpan DIGIPASS FX1 BIO\",\n    \"341e4da9-3c2e-8103-5a9f-aad887135200\": \"Ledger Nano S FIDO2 Authenticator\",\n    \"34f5766d-1536-4a24-9033-0e294e510fb0\": \"YubiKey 5 Series CTAP2.1 Preview Expired \",\n    \"361a3082-0278-4583-a16f-72a527f973e4\": \"eWBM eFA500 FIDO2 Authenticator\",\n    \"3789da91-f943-46bc-95c3-50ea2012f03a\": \"NEOWAVE Winkeo FIDO2\",\n    \"39a5647e-1853-446c-a1f6-a79bae9f5bc7\": \"IDmelon\",\n    \"3b1adb99-0dfe-46fd-90b8-7f7614a4de2a\": \"GoTrust Idem Key FIDO2 Authenticator\",\n    \"3e078ffd-4c54-4586-8baa-a77da113aec5\": \"Hideez Key 3 FIDO2\",\n    \"3e22415d-7fdf-4ea4-8a0c-dd60c4249b9d\": \"Feitian iePass FIDO Authenticator\",\n    \"3f59672f-20aa-4afe-b6f4-7e5e916b6d98\": \"Arculus FIDO 2.1 Key Card [P71]\",\n    \"42b4fb4a-2866-43b2-9bf7-6c6669c2e5d3\": \"Google Titan Security Key v2\",\n    \"454e5346-4944-4ffd-6c93-8e9267193e9a\": \"Ensurity ThinC\",\n    \"4b3f8944-d4f2-4d21-bb19-764a986ec160\": \"KeyXentic FIDO2 Secp256R1 FIDO2 CTAP2 Authenticator\",\n    \"4c0cf95d-2f40-43b5-ba42-4c83a11c04ba\": \"Feitian BioPass FIDO2 Pro Authenticator\",\n    \"4c50ff10-1057-4fc6-b8ed-43a529530c3c\": \"ImproveID Authenticator\",\n    \"4d41190c-7beb-4a84-8018-adf265a6352d\": \"Thales IDPrime FIDO Bio\",\n    \"4e768f2c-5fab-48b3-b300-220eb487752b\": \"Hideez Key 4 FIDO2 SDK\",\n    \"504d7149-4e4c-3841-4555-55445a677357\": \"WiSECURE AuthTron USB FIDO2 Authenticator\",\n    \"50a45b0c-80e7-f944-bf29-f552bfa2e048\": \"ACS FIDO Authenticator\",\n    \"516d3969-5a57-5651-5958-4e7a49434167\": \"SmartDisplayer BobeePass FIDO2 Authenticator\",\n    \"531126d6-e717-415c-9320-3d9aa6981239\": \"Dashlane\",\n    \"53414d53-554e-4700-0000-000000000000\": \"Samsung Pass\",\n    \"5343502d-5343-5343-6172-644649444f32\": \"ESS Smart Card Inc. Authenticator\",\n    \"54d9fee8-e621-4291-8b18-7157b99c5bec\": \"HID Crescendo Enabled\",\n    \"5626bed4-e756-430b-a7ff-ca78c8b12738\": \"VALMIDO PRO FIDO\",\n    \"58b44d0b-0a7c-f33a-fd48-f7153c871352\": \"Ledger Nano S Plus FIDO2 Authenticator\",\n    \"5ca1ab1e-1337-fa57-f1d0-a117e71ca702\": \"Allthenticator App: roaming BLE FIDO2 Allthenticator for Windows, Mac, Linux, and Allthenticate door readers\",\n    \"5d629218-d3a5-11ed-afa1-0242ac120002\": \"Swissbit iShield Key Pro\",\n    \"5fdb81b8-53f0-4967-a881-f5ec26fe4d18\": \"VinCSS FIDO2 Authenticator\",\n    \"6002f033-3c07-ce3e-d0f7-0ffe5ed42543\": \"Excelsecu eSecu FIDO2 Fingerprint Key\",\n    \"6028b017-b1d4-4c02-b4b3-afcdafc96bb2\": \"Windows Hello\",\n    \"61250591-b2bc-4456-b719-0b17be90bb30\": \"eWBM eFPA FIDO2 Authenticator\",\n    \"664d9f67-84a2-412a-9ff7-b4f7d8ee6d05\": \"OpenSK authenticator\",\n    \"66a0ccb3-bd6a-191f-ee06-e375c50b9846\": \"Thales Bio iOS SDK\",\n    \"692db549-7ae5-44d5-a1e5-dd20a493b723\": \"HID Crescendo Key\",\n    \"69700f79-d1fb-472e-bd9b-a3a3b9a9eda0\": \"Pone Biometrics OFFPAD Authenticator\",\n    \"6d44ba9b-f6ec-2e49-b930-0c8fe920cb73\": \"Security Key by Yubico with NFC\",\n    \"73402251-f2a8-4f03-873e-3cb6db604b03\": \"uTrust FIDO2 Security Key\",\n    \"73bb0cd4-e502-49b8-9c6f-b59445bf720b\": \"YubiKey 5 FIPS Series\",\n    \"74820b05-a6c9-40f9-8fb0-9f86aca93998\": \"SafeNet eToken Fusion\",\n    \"77010bd7-212a-4fc9-b236-d2ca5e9d4084\": \"Feitian BioPass FIDO2 Authenticator\",\n    \"771b48fd-d3d4-4f74-9232-fc157ab0507a\": \"Edge on Mac\",\n    \"7e3f3d30-3557-4442-bdae-139312178b39\": \"RSA DS100\",\n    \"820d89ed-d65a-409e-85cb-f73f0578f82a\": \"IDmelon iOS Authenticator\",\n    \"833b721a-ff5f-4d00-bb2e-bdda3ec01e29\": \"Feitian ePass FIDO2 Authenticator\",\n    \"83c47309-aabb-4108-8470-8be838b573cb\": \"YubiKey Bio Series (Enterprise Profile)\",\n    \"85203421-48f9-4355-9bc8-8a53846e5083\": \"YubiKey 5 FIPS Series with Lightning\",\n    \"87dbc5a1-4c94-4dc8-8a47-97d800fd1f3c\": \"eWBM eFA320 FIDO2 Authenticator\",\n    \"8836336a-f590-0921-301d-46427531eee6\": \"Thales Bio Android SDK\",\n    \"8876631b-d4a0-427f-5773-0ec71c9e0279\": \"Solo Secp256R1 FIDO2 CTAP2 Authenticator\",\n    \"88bbd2f0-342a-42e7-9729-dd158be5407a\": \"Precision InnaIT Key FIDO 2 Level 2 certified\",\n    \"8976631b-d4a0-427f-5773-0ec71c9e0279\": \"Solo Tap Secp256R1 FIDO2 CTAP2 Authenticator\",\n    \"89b19028-256b-4025-8872-255358d950e4\": \"Sentry Enterprises CTAP2 Authenticator\",\n    \"8c97a730-3f7b-41a6-87d6-1e9b62bda6f0\": \"FT-JCOS FIDO Fingerprint Card\",\n    \"8d1b1fcb-3c76-49a9-9129-5515b346aa02\": \"IDEMIA ID-ONE Card\",\n    \"91ad6b93-264b-4987-8737-3a690cad6917\": \"Token Ring FIDO2 Authenticator\",\n    \"931327dd-c89b-406c-a81e-ed7058ef36c6\": \"Swissbit iShield Key FIDO2\",\n    \"95442b2e-f15e-4def-b270-efb106facb4e\": \"eWBM eFA310 FIDO2 Authenticator\",\n    \"95e4d58c-056e-4a65-866d-f5a69659e880\": \"TruU Windows Authenticator\",\n    \"973446ca-e21c-9a9b-99f5-9b985a67af0f\": \"ACS FIDO Authenticator Card\",\n    \"9876631b-d4a0-427f-5773-0ec71c9e0279\": \"Somu Secp256R1 FIDO2 CTAP2 Authenticator\",\n    \"998f358b-2dd2-4cbe-a43a-e8107438dfb3\": \"OnlyKey Secp256R1 FIDO2 CTAP2 Authenticator\",\n    \"99bf4610-ec26-4252-b31f-7380ccd59db5\": \"ZTPass Card\",\n    \"9c835346-796b-4c27-8898-d6032f515cc5\": \"Cryptnox FIDO2\",\n    \"9d3df6ba-282f-11ed-a261-0242ac120002\": \"Arculus FIDO2/U2F Key Card\",\n    \"9ddd1817-af5a-4672-a2b9-3e3dd95000a9\": \"Windows Hello\",\n    \"9f0d8150-baa5-4c00-9299-ad62c8bb4e87\": \"GoTrust Idem Card FIDO2 Authenticator\",\n    \"9f77e279-a6e2-4d58-b700-31e5943c6a98\": \"Hyper FIDO Pro\",\n    \"a1f52be5-dfab-4364-b51c-2bd496b14a56\": \"OCTATCO EzFinger2 FIDO2 AUTHENTICATOR\",\n    \"a3975549-b191-fd67-b8fb-017e2917fdb3\": \"Excelsecu eSecu FIDO2 NFC Security Key\",\n    \"a4e9fc6d-4cbe-4758-b8ba-37598bb5bbaa\": \"Security Key NFC by Yubico\",\n    \"ab32f0c6-2239-afbb-c470-d2ef4e254db6\": \"TEST (DUMMY RECORD)\",\n    \"ab32f0c6-2239-afbb-c470-d2ef4e254db7\": \"TOKEN2 FIDO2 Security Key\",\n    \"adce0002-35bc-c60a-648b-0b25f1f05503\": \"Chrome on Mac\",\n    \"aeb6569c-f8fb-4950-ac60-24ca2bbe2e52\": \"HID Crescendo C2300\",\n    \"b267239b-954f-4041-a01b-ee4f33c145b6\": \"authenton1 - CTAP2.1\",\n    \"b50d5e0a-7f81-4959-9b12-f45407407503\": \"IDPrime 3940 FIDO\",\n    \"b5397666-4885-aa6b-cebf-e52262a439a2\": \"Chromium Browser\",\n    \"b6ede29c-3772-412c-8a78-539c1f4c62d2\": \"Feitian BioPass FIDO2 Plus Authenticator\",\n    \"b84e4048-15dc-4dd0-8640-f4f60813c8af\": \"NordPass\",\n    \"b92c3f9a-c014-4056-887f-140a2501163b\": \"Security Key by Yubico\",\n    \"b93fd961-f2e6-462f-b122-82002247de78\": \"Android Authenticator with SafetyNet Attestation\",\n    \"ba76a271-6eb6-4171-874d-b6428dbe3437\": \"ATKey.ProS\",\n    \"ba86dc56-635f-4141-aef6-00227b1b9af6\": \"TruU Windows Authenticator\",\n    \"bada5566-a7aa-401f-bd96-45619a55120d\": \"1Password\",\n    \"bbf4b6a7-679d-f6fc-c4f2-8ac0ddf9015a\": \"Excelsecu eSecu FIDO2 PRO Security Key\",\n    \"bc2fe499-0d8e-4ffe-96f3-94a82840cf8c\": \"OCTATCO EzQuant FIDO2 AUTHENTICATOR\",\n    \"be727034-574a-f799-5c76-0929e0430973\": \"Crayonic KeyVault K1 (USB-NFC-BLE FIDO2 Authenticator)\",\n    \"c1f9a0bc-1dd2-404a-b27f-8e29047a43fd\": \"YubiKey 5 FIPS Series with NFC\",\n    \"c5703116-972b-4851-a3e7-ae1259843399\": \"NEOWAVE Badgeo FIDO2\",\n    \"c5ef55ff-ad9a-4b9f-b580-adebafe026d0\": \"YubiKey 5 Series with Lightning\",\n    \"c80dbd9a-533f-4a17-b941-1a2f1c7cedff\": \"HID Crescendo C3000\",\n    \"ca4cff1b-5a81-4404-8194-59aabcf1660b\": \"IDPrime 3930 FIDO\",\n    \"ca87cb70-4c1b-4579-a8e8-4efdd7c007e0\": \"FIDO Alliance TruU Sample FIDO2 Authenticator\",\n    \"cb69481e-8ff7-4039-93ec-0a2729a154a8\": \"YubiKey 5 Series\",\n    \"cd69adb5-3c7a-deb9-3177-6800ea6cb72a\": \"Thales PIN Android SDK\",\n    \"cdbdaea2-c415-5073-50f7-c04e968640b6\": \"Excelsecu eSecu FIDO2 Security Key\",\n    \"cfcb13a2-244f-4b36-9077-82b79d6a7de7\": \"USB/NFC Passcode Authenticator\",\n    \"d384db22-4d50-ebde-2eac-5765cf1e2a44\": \"Excelsecu eSecu FIDO2 Fingerprint Security Key\",\n    \"d41f5a69-b817-4144-a13c-9ebd6d9254d6\": \"ATKey.Card CTAP2.0\",\n    \"d548826e-79b4-db40-a3d8-11116f7e8349\": \"Bitwarden\",\n    \"d61d3b87-3e7c-4aea-9c50-441c371903ad\": \"KeyVault Secp256R1 FIDO2 CTAP2 Authenticator\",\n    \"d7a423ad-3e19-4492-9200-78137dccc136\": \"VivoKey Apex FIDO2\",\n    \"d821a7d4-e97c-4cb6-bd82-4237731fd4be\": \"Hyper FIDO Bio Security Key\",\n    \"d8522d9f-575b-4866-88a9-ba99fa02f35b\": \"YubiKey Bio Series\",\n    \"d91c5288-0ef0-49b7-b8ae-21ca0aa6b3f3\": \"KEY-ID FIDO2 Authenticator\",\n    \"d94a29d9-52dd-4247-9c2d-8b818b610389\": \"VeriMark Guard Fingerprint Key\",\n    \"da1fa263-8b25-42b6-a820-c0036f21ba7f\": \"ATKey.Card NFC\",\n    \"dd4ec289-e01d-41c9-bb89-70fa845d4bf2\": \"iCloud Keychain (Managed)\",\n    \"e1a96183-5016-4f24-b55b-e3ae23614cc6\": \"ATKey.Pro CTAP2.0\",\n    \"e416201b-afeb-41ca-a03d-2281c28322aa\": \"ATKey.Pro CTAP2.1\",\n    \"e86addcd-7711-47e5-b42a-c18257b0bf61\": \"IDCore 3121 Fido\",\n    \"ea9b8d66-4d01-1d21-3ce4-b6b48cb575d4\": \"Google Password Manager\",\n    \"eabb46cc-e241-80bf-ae9e-96fa6d2975cf\": \"TOKEN2 PIN Plus Security Key Series \",\n    \"eb3b131e-59dc-536a-d176-cb7306da10f5\": \"ellipticSecure MIRkey USB Authenticator\",\n    \"ec31b4cc-2acc-4b8e-9c01-bade00ccbe26\": \"KeyXentic FIDO2 Secp256R1 FIDO2 CTAP2 Authenticator\",\n    \"ee041bce-25e5-4cdb-8f86-897fd6418464\": \"Feitian ePass FIDO2-NFC Authenticator\",\n    \"ee882879-721c-4913-9775-3dfcce97072a\": \"YubiKey 5 Series\",\n    \"efb96b10-a9ee-4b6c-a4a9-d32125ccd4a4\": \"Safenet eToken FIDO\",\n    \"f3809540-7f14-49c1-a8b3-8f813b225541\": \"Enpass\",\n    \"f4c63eff-d26c-4248-801c-3736c7eaa93a\": \"FIDO KeyPass S3\",\n    \"f7c558a0-f465-11e8-b568-0800200c9a66\": \"KONAI Secp256R1 FIDO2 Conformance Testing CTAP2 Authenticator\",\n    \"f8a011f3-8c0a-4d15-8006-17111f9edc7d\": \"Security Key by Yubico\",\n    \"fa2b99dc-9e39-4257-8f92-4a30d23c4118\": \"YubiKey 5 Series with NFC\",\n    \"fbefdf68-fe86-0106-213e-4d5fa24cbe2e\": \"Excelsecu eSecu FIDO2 NFC Security Key\",\n    \"fbfc3007-154e-4ecc-8c0b-6e020557d7bd\": \"iCloud Keychain\",\n    \"fcb1bcb4-f370-078c-6993-bc24d0ae3fbe\": \"Ledger Nano X FIDO2 Authenticator\",\n    \"fec067a1-f1d0-4c5e-b4c0-cc3237475461\": \"KX701 SmartToken FIDO\"\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@passwordless-id/webauthn/dist/esm/authenticatorMetadata.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@passwordless-id/webauthn/dist/esm/authenticators.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@passwordless-id/webauthn/dist/esm/authenticators.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   extractAaguid: () => (/* binding */ extractAaguid),\n/* harmony export */   parseAuthBuffer: () => (/* binding */ parseAuthBuffer),\n/* harmony export */   resolveAuthenticatorName: () => (/* binding */ resolveAuthenticatorName),\n/* harmony export */   updateDevicesMetadata: () => (/* binding */ updateDevicesMetadata)\n/* harmony export */ });\n/* harmony import */ var _authenticatorMetadata_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./authenticatorMetadata.js */ \"(ssr)/./node_modules/@passwordless-id/webauthn/dist/esm/authenticatorMetadata.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/@passwordless-id/webauthn/dist/esm/utils.js\");\n\n\nfunction parseAuthBuffer(authData) {\n    //console.debug(authData)\n    let flags = new DataView(authData.slice(32, 33)).getUint8(0);\n    //console.debug(flags)\n    // https://w3c.github.io/webauthn/#sctn-authenticator-data\n    let parsed = {\n        rpIdHash: _utils_js__WEBPACK_IMPORTED_MODULE_1__.toBase64url(authData.slice(0, 32)),\n        flags: {\n            userPresent: !!(flags & 1),\n            //reserved1: !!(flags & 2),\n            userVerified: !!(flags & 4),\n            backupEligibility: !!(flags & 8),\n            backupState: !!(flags & 16),\n            //reserved2: !!(flags & 32),\n            attestedData: !!(flags & 64),\n            extensionsIncluded: !!(flags & 128)\n        },\n        counter: new DataView(authData.slice(33, 37)).getUint32(0, false)\n    };\n    // this is more descriptive than \"backupState\"\n    parsed.synced = parsed.flags.backupState;\n    if (authData.byteLength > 37) {\n        // registration contains additional data\n        const aaguid = extractAaguid(authData); // bytes 37->53\n        // https://w3c.github.io/webauthn/#attested-credential-data\n        parsed = {\n            ...parsed,\n            aaguid,\n            name: _authenticatorMetadata_js__WEBPACK_IMPORTED_MODULE_0__.authenticatorMetadata[aaguid] ?? \"Unknown\",\n            icon_light: \"https://webauthn.passwordless.id/authenticators/\" + aaguid + \"-light.png\",\n            icon_dark: \"https://webauthn.passwordless.id/authenticators/\" + aaguid + \"-dark.png\"\n        };\n    }\n    return parsed;\n}\nfunction extractAaguid(authData) {\n    return formatAaguid(authData.slice(37, 53)); // 16 bytes\n}\nfunction formatAaguid(buffer) {\n    let aaguid = _utils_js__WEBPACK_IMPORTED_MODULE_1__.bufferToHex(buffer);\n    aaguid = aaguid.substring(0, 8) + \"-\" + aaguid.substring(8, 12) + \"-\" + aaguid.substring(12, 16) + \"-\" + aaguid.substring(16, 20) + \"-\" + aaguid.substring(20, 32);\n    return aaguid; // example: \"d41f5a69-b817-4144-a13c-9ebd6d9254d6\"\n}\n/**\n * Kept for compatibility purposes.\n * @deprecated\n */ function resolveAuthenticatorName(aaguid) {\n    const aaguidMetadata = updatedAuthenticatorMetadata ?? _authenticatorMetadata_js__WEBPACK_IMPORTED_MODULE_0__.authenticatorMetadata; //await getAaguidMetadata()\n    return aaguidMetadata[aaguid];\n}\nlet updatedAuthenticatorMetadata = null;\n/**\n * Updates the built-in metadata according to raw data available at https://mds.fidoalliance.org/\n * This service delivers a list of AAGUIDs encoded as a JWT.\n * Kept for compatibility purposes.\n * @deprecated\n */ async function updateDevicesMetadata() {\n    // this function is rather resource intensive and time consuming\n    // therefore, the result is cached in local storage\n    const jwt = await (await fetch(\"https://mds.fidoalliance.org\")).text();\n    // the response is a JWT including all AAGUIDs and their metadata\n    console.debug(jwt);\n    // let us ignore the JWT verification, since this is solely for descriptive purposes, not signed data\n    const payload = jwt.split(\".\")[1].replaceAll(\"-\", \"+\").replaceAll(\"_\", \"/\");\n    const json = JSON.parse(atob(payload));\n    console.debug(json);\n    let aaguidMetadata = {};\n    for (const e of json.entries){\n        if (!e.aaguid || !e.metadataStatement) continue;\n        aaguidMetadata[e.aaguid] = e.metadataStatement.description;\n    }\n    console.debug(aaguidMetadata);\n    updatedAuthenticatorMetadata = aaguidMetadata;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@passwordless-id/webauthn/dist/esm/authenticators.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@passwordless-id/webauthn/dist/esm/client.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@passwordless-id/webauthn/dist/esm/client.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   authenticate: () => (/* binding */ authenticate),\n/* harmony export */   isAvailable: () => (/* binding */ isAvailable),\n/* harmony export */   isLocalAuthenticator: () => (/* binding */ isLocalAuthenticator),\n/* harmony export */   register: () => (/* binding */ register)\n/* harmony export */ });\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/@passwordless-id/webauthn/dist/esm/utils.js\");\n\n/**\n * Returns whether passwordless authentication is available on this browser/platform or not.\n */ function isAvailable() {\n    return !!window.PublicKeyCredential;\n}\n/**\n * Returns whether the device itself can be used as authenticator.\n */ async function isLocalAuthenticator() {\n    return await PublicKeyCredential.isUserVerifyingPlatformAuthenticatorAvailable();\n}\nasync function getAuthAttachment(authType) {\n    if (authType === \"local\") return \"platform\";\n    if (authType === \"roaming\" || authType === \"extern\") return \"cross-platform\";\n    if (authType === \"both\") return undefined; // The webauthn protocol considers `null` as invalid but `undefined` as \"both\"!\n    // the default case: \"auto\", depending on device capabilities\n    try {\n        if (await isLocalAuthenticator()) return \"platform\";\n        else return \"cross-platform\";\n    } catch (e) {\n        // might happen due to some security policies\n        // see https://w3c.github.io/webauthn/#sctn-isUserVerifyingPlatformAuthenticatorAvailable\n        return undefined; // The webauthn protocol considers `null` as invalid but `undefined` as \"both\"!\n    }\n}\nfunction getAlgoName(num) {\n    switch(num){\n        case -7:\n            return \"ES256\";\n        // case -8 ignored to to its rarity\n        case -257:\n            return \"RS256\";\n        default:\n            throw new Error(`Unknown algorithm code: ${num}`);\n    }\n}\n/**\n * Creates a cryptographic key pair, in order to register the public key for later passwordless authentication.\n *\n * @param {string} username\n * @param {string} challenge A server-side randomly generated string.\n * @param {Object} [options] Optional parameters.\n * @param {number} [options.timeout=60000] Number of milliseconds the user has to respond to the biometric/PIN check.\n * @param {'required'|'preferred'|'discouraged'} [options.userVerification='required'] Whether to prompt for biometric/PIN check or not.\n * @param {'auto'|'local'|'roaming'|'both'}       [options.authenticatorType='auto'] Which device to use as authenticator.\n *          'auto': if the local device can be used as authenticator it will be preferred. Otherwise it will prompt for a roaming device.\n *          'local': use the local device (using TouchID, FaceID, Windows Hello or PIN)\n *          'roaming': use a roaming device (security key or connected phone)\n *          'both': prompt the user to choose between local or roaming device. The UI and user interaction in this case is platform specific.\n * @param {boolean} [options.attestation=false] If enabled, the device attestation and clientData will be provided as Base64url encoded binary data.\n *                                Note that this is not available on some platforms.\n * @param {'discouraged'|'preferred'|'required'} [options.discoverable] A \"discoverable\" credential can be selected using `authenticate(...)` without providing credential IDs.\n *              Instead, a native pop-up will appear for user selection.\n *              This may have an impact on the \"passkeys\" user experience and syncing behavior of the key.\n */ async function register(username, challenge, options) {\n    options = options ?? {};\n    if (!_utils_js__WEBPACK_IMPORTED_MODULE_0__.isBase64url(challenge)) throw new Error(\"Provided challenge is not properly encoded in Base64url\");\n    const creationOptions = {\n        challenge: _utils_js__WEBPACK_IMPORTED_MODULE_0__.parseBase64url(challenge),\n        rp: {\n            id: options.domain ?? window.location.hostname,\n            name: options.domain ?? window.location.hostname\n        },\n        user: {\n            id: options.userHandle ? _utils_js__WEBPACK_IMPORTED_MODULE_0__.toBuffer(options.userHandle) : await _utils_js__WEBPACK_IMPORTED_MODULE_0__.sha256(new TextEncoder().encode(\"passwordless.id-user:\" + username)),\n            name: username,\n            displayName: username\n        },\n        pubKeyCredParams: [\n            {\n                alg: -7,\n                type: \"public-key\"\n            },\n            {\n                alg: -257,\n                type: \"public-key\"\n            }\n        ],\n        timeout: options.timeout ?? 60000,\n        authenticatorSelection: {\n            userVerification: options.userVerification ?? \"required\",\n            authenticatorAttachment: await getAuthAttachment(options.authenticatorType ?? \"auto\"),\n            residentKey: options.discoverable ?? \"preferred\",\n            requireResidentKey: options.discoverable === \"required\" // mainly for backwards compatibility, see https://www.w3.org/TR/webauthn/#dictionary-authenticatorSelection\n        },\n        attestation: \"direct\"\n    };\n    if (options.debug) console.debug(creationOptions);\n    const credential = await navigator.credentials.create({\n        publicKey: creationOptions\n    }); //PublicKeyCredential\n    if (options.debug) console.debug(credential);\n    const response = credential.response; // AuthenticatorAttestationResponse\n    let registration = {\n        username: username,\n        credential: {\n            id: credential.id,\n            publicKey: _utils_js__WEBPACK_IMPORTED_MODULE_0__.toBase64url(response.getPublicKey()),\n            algorithm: getAlgoName(credential.response.getPublicKeyAlgorithm())\n        },\n        authenticatorData: _utils_js__WEBPACK_IMPORTED_MODULE_0__.toBase64url(response.getAuthenticatorData()),\n        clientData: _utils_js__WEBPACK_IMPORTED_MODULE_0__.toBase64url(response.clientDataJSON)\n    };\n    if (options.attestation) {\n        registration.attestationData = _utils_js__WEBPACK_IMPORTED_MODULE_0__.toBase64url(response.attestationObject);\n    }\n    return registration;\n}\nasync function getTransports(authType) {\n    const local = [\n        \"internal\"\n    ];\n    // 'hybrid' was added mid-2022 in the specs and currently not yet available in the official dom types\n    // @ts-ignore\n    const roaming = [\n        \"hybrid\",\n        \"usb\",\n        \"ble\",\n        \"nfc\"\n    ];\n    if (authType === \"local\") return local;\n    if (authType == \"roaming\" || authType === \"extern\") return roaming;\n    if (authType === \"both\") return [\n        ...local,\n        ...roaming\n    ];\n    // the default case: \"auto\", depending on device capabilities\n    try {\n        if (await isLocalAuthenticator()) return local;\n        else return roaming;\n    } catch (e) {\n        return [\n            ...local,\n            ...roaming\n        ];\n    }\n}\n/**\n * Signs a challenge using one of the provided credentials IDs in order to authenticate the user.\n *\n * @param {string[]} credentialIds The list of credential IDs that can be used for signing.\n * @param {string} challenge A server-side randomly generated string, the base64 encoded version will be signed.\n * @param {Object} [options] Optional parameters.\n * @param {number} [options.timeout=60000] Number of milliseconds the user has to respond to the biometric/PIN check.\n * @param {'required'|'preferred'|'discouraged'} [options.userVerification='required'] Whether to prompt for biometric/PIN check or not.\n * @param {'optional'|'conditional'|'required'|'silent'} [options.mediation='optional'] https://developer.mozilla.org/en-US/docs/Web/API/CredentialsContainer/get#mediation\n */ async function authenticate(credentialIds, challenge, options) {\n    options = options ?? {};\n    if (!_utils_js__WEBPACK_IMPORTED_MODULE_0__.isBase64url(challenge)) throw new Error(\"Provided challenge is not properly encoded in Base64url\");\n    const transports = await getTransports(options.authenticatorType ?? \"auto\");\n    let authOptions = {\n        challenge: _utils_js__WEBPACK_IMPORTED_MODULE_0__.parseBase64url(challenge),\n        rpId: options.domain ?? window.location.hostname,\n        allowCredentials: credentialIds.map((id)=>{\n            return {\n                id: _utils_js__WEBPACK_IMPORTED_MODULE_0__.parseBase64url(id),\n                type: \"public-key\",\n                transports: transports\n            };\n        }),\n        userVerification: options.userVerification ?? \"required\",\n        timeout: options.timeout ?? 60000\n    };\n    if (options.debug) console.debug(authOptions);\n    let auth = await navigator.credentials.get({\n        publicKey: authOptions,\n        mediation: options.mediation\n    });\n    if (options.debug) console.debug(auth);\n    const response = auth.response;\n    const authentication = {\n        credentialId: auth.id,\n        authenticatorData: _utils_js__WEBPACK_IMPORTED_MODULE_0__.toBase64url(response.authenticatorData),\n        clientData: _utils_js__WEBPACK_IMPORTED_MODULE_0__.toBase64url(response.clientDataJSON),\n        signature: _utils_js__WEBPACK_IMPORTED_MODULE_0__.toBase64url(response.signature),\n        userHandle: response.userHandle ? _utils_js__WEBPACK_IMPORTED_MODULE_0__.toBase64url(response.userHandle) : undefined // may not be returned by every authenticator\n    };\n    return authentication;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@passwordless-id/webauthn/dist/esm/client.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@passwordless-id/webauthn/dist/esm/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/@passwordless-id/webauthn/dist/esm/index.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   authenticatorMetadata: () => (/* reexport safe */ _authenticatorMetadata_js__WEBPACK_IMPORTED_MODULE_4__.authenticatorMetadata),\n/* harmony export */   client: () => (/* reexport module object */ _client_js__WEBPACK_IMPORTED_MODULE_0__),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   parsers: () => (/* reexport module object */ _parsers_js__WEBPACK_IMPORTED_MODULE_2__),\n/* harmony export */   server: () => (/* reexport module object */ _server_js__WEBPACK_IMPORTED_MODULE_1__),\n/* harmony export */   utils: () => (/* reexport module object */ _utils_js__WEBPACK_IMPORTED_MODULE_3__)\n/* harmony export */ });\n/* harmony import */ var _client_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./client.js */ \"(ssr)/./node_modules/@passwordless-id/webauthn/dist/esm/client.js\");\n/* harmony import */ var _server_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./server.js */ \"(ssr)/./node_modules/@passwordless-id/webauthn/dist/esm/server.js\");\n/* harmony import */ var _parsers_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./parsers.js */ \"(ssr)/./node_modules/@passwordless-id/webauthn/dist/esm/parsers.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/@passwordless-id/webauthn/dist/esm/utils.js\");\n/* harmony import */ var _authenticatorMetadata_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./authenticatorMetadata.js */ \"(ssr)/./node_modules/@passwordless-id/webauthn/dist/esm/authenticatorMetadata.js\");\n/*\nexport * from './types'\nexport * from './webauthn'\nexport * from './parsers'\nexport * from './validation'\n*/ \n\n\n\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    client: _client_js__WEBPACK_IMPORTED_MODULE_0__,\n    server: _server_js__WEBPACK_IMPORTED_MODULE_1__,\n    parsers: _parsers_js__WEBPACK_IMPORTED_MODULE_2__,\n    utils: _utils_js__WEBPACK_IMPORTED_MODULE_3__,\n    authenticatorMetadata: _authenticatorMetadata_js__WEBPACK_IMPORTED_MODULE_4__.authenticatorMetadata\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHBhc3N3b3JkbGVzcy1pZC93ZWJhdXRobi9kaXN0L2VzbS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUFBOzs7OztBQUtBLEdBQ3NDO0FBQ0E7QUFDRTtBQUNKO0FBQytCO0FBQ0Y7QUFDakUsaUVBQWU7SUFBRUEsTUFBTUEseUNBQUFBO0lBQUVDLE1BQU1BLHlDQUFBQTtJQUFFQyxPQUFPQSwwQ0FBQUE7SUFBRUMsS0FBS0Esd0NBQUFBO0lBQUVDLHFCQUFxQkEsOEVBQUFBO0FBQUMsQ0FBQyxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2xpZW50Ly4vbm9kZV9tb2R1bGVzL0BwYXNzd29yZGxlc3MtaWQvd2ViYXV0aG4vZGlzdC9lc20vaW5kZXguanM/ZTU1NCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuZXhwb3J0ICogZnJvbSAnLi90eXBlcydcbmV4cG9ydCAqIGZyb20gJy4vd2ViYXV0aG4nXG5leHBvcnQgKiBmcm9tICcuL3BhcnNlcnMnXG5leHBvcnQgKiBmcm9tICcuL3ZhbGlkYXRpb24nXG4qL1xuaW1wb3J0ICogYXMgY2xpZW50IGZyb20gJy4vY2xpZW50LmpzJztcbmltcG9ydCAqIGFzIHNlcnZlciBmcm9tICcuL3NlcnZlci5qcyc7XG5pbXBvcnQgKiBhcyBwYXJzZXJzIGZyb20gJy4vcGFyc2Vycy5qcyc7XG5pbXBvcnQgKiBhcyB1dGlscyBmcm9tICcuL3V0aWxzLmpzJztcbmltcG9ydCB7IGF1dGhlbnRpY2F0b3JNZXRhZGF0YSB9IGZyb20gJy4vYXV0aGVudGljYXRvck1ldGFkYXRhLmpzJztcbmV4cG9ydCB7IGNsaWVudCwgc2VydmVyLCBwYXJzZXJzLCB1dGlscywgYXV0aGVudGljYXRvck1ldGFkYXRhIH07XG5leHBvcnQgZGVmYXVsdCB7IGNsaWVudCwgc2VydmVyLCBwYXJzZXJzLCB1dGlscywgYXV0aGVudGljYXRvck1ldGFkYXRhIH07XG4iXSwibmFtZXMiOlsiY2xpZW50Iiwic2VydmVyIiwicGFyc2VycyIsInV0aWxzIiwiYXV0aGVudGljYXRvck1ldGFkYXRhIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@passwordless-id/webauthn/dist/esm/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@passwordless-id/webauthn/dist/esm/parsers.js":
/*!********************************************************************!*\
  !*** ./node_modules/@passwordless-id/webauthn/dist/esm/parsers.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseAttestation: () => (/* binding */ parseAttestation),\n/* harmony export */   parseAuthentication: () => (/* binding */ parseAuthentication),\n/* harmony export */   parseAuthenticator: () => (/* binding */ parseAuthenticator),\n/* harmony export */   parseClient: () => (/* binding */ parseClient),\n/* harmony export */   parseRegistration: () => (/* binding */ parseRegistration)\n/* harmony export */ });\n/* harmony import */ var _authenticators_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./authenticators.js */ \"(ssr)/./node_modules/@passwordless-id/webauthn/dist/esm/authenticators.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/@passwordless-id/webauthn/dist/esm/utils.js\");\n\n\nconst utf8Decoder = new TextDecoder(\"utf-8\");\nfunction parseClient(data) {\n    if (typeof data == \"string\") data = _utils_js__WEBPACK_IMPORTED_MODULE_1__.parseBase64url(data);\n    return JSON.parse(utf8Decoder.decode(data));\n}\nfunction parseAuthenticator(data) {\n    if (typeof data == \"string\") data = _utils_js__WEBPACK_IMPORTED_MODULE_1__.parseBase64url(data);\n    return _authenticators_js__WEBPACK_IMPORTED_MODULE_0__.parseAuthBuffer(data);\n}\nfunction parseAttestation(data) {\n    //if(typeof data == 'string')\n    //    data = utils.parseBase64url(data)\n    // Useless comment, let's at least provide the raw value \n    // return \"The device attestation proves the authenticity of the device model / aaguid. It's not guaranteed to be included and really complex to parse / verify. Good luck with that one!\"\n    return data;\n}\nfunction parseRegistration(registration) {\n    return {\n        username: registration.username,\n        credential: registration.credential,\n        client: parseClient(registration.clientData),\n        authenticator: parseAuthenticator(registration.authenticatorData),\n        attestation: registration.attestationData ? parseAttestation(registration.attestationData) : null\n    };\n}\nfunction parseAuthentication(authentication) {\n    return {\n        credentialId: authentication.credentialId,\n        client: parseClient(authentication.clientData),\n        authenticator: parseAuthenticator(authentication.authenticatorData),\n        signature: authentication.signature\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHBhc3N3b3JkbGVzcy1pZC93ZWJhdXRobi9kaXN0L2VzbS9wYXJzZXJzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBc0Q7QUFDbEI7QUFDcEMsTUFBTUUsY0FBYyxJQUFJQyxZQUFZO0FBQzdCLFNBQVNDLFlBQVlDLElBQUk7SUFDNUIsSUFBSSxPQUFPQSxRQUFRLFVBQ2ZBLE9BQU9KLHFEQUFvQixDQUFDSTtJQUNoQyxPQUFPRSxLQUFLQyxLQUFLLENBQUNOLFlBQVlPLE1BQU0sQ0FBQ0o7QUFDekM7QUFDTyxTQUFTSyxtQkFBbUJMLElBQUk7SUFDbkMsSUFBSSxPQUFPQSxRQUFRLFVBQ2ZBLE9BQU9KLHFEQUFvQixDQUFDSTtJQUNoQyxPQUFPTCwrREFBOEIsQ0FBQ0s7QUFDMUM7QUFDTyxTQUFTTyxpQkFBaUJQLElBQUk7SUFDakMsNkJBQTZCO0lBQzdCLHVDQUF1QztJQUN2Qyx5REFBeUQ7SUFDekQsMExBQTBMO0lBQzFMLE9BQU9BO0FBQ1g7QUFDTyxTQUFTUSxrQkFBa0JDLFlBQVk7SUFDMUMsT0FBTztRQUNIQyxVQUFVRCxhQUFhQyxRQUFRO1FBQy9CQyxZQUFZRixhQUFhRSxVQUFVO1FBQ25DQyxRQUFRYixZQUFZVSxhQUFhSSxVQUFVO1FBQzNDQyxlQUFlVCxtQkFBbUJJLGFBQWFNLGlCQUFpQjtRQUNoRUMsYUFBYVAsYUFBYVEsZUFBZSxHQUFHVixpQkFBaUJFLGFBQWFRLGVBQWUsSUFBSTtJQUNqRztBQUNKO0FBQ08sU0FBU0Msb0JBQW9CQyxjQUFjO0lBQzlDLE9BQU87UUFDSEMsY0FBY0QsZUFBZUMsWUFBWTtRQUN6Q1IsUUFBUWIsWUFBWW9CLGVBQWVOLFVBQVU7UUFDN0NDLGVBQWVULG1CQUFtQmMsZUFBZUosaUJBQWlCO1FBQ2xFTSxXQUFXRixlQUFlRSxTQUFTO0lBQ3ZDO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jbGllbnQvLi9ub2RlX21vZHVsZXMvQHBhc3N3b3JkbGVzcy1pZC93ZWJhdXRobi9kaXN0L2VzbS9wYXJzZXJzLmpzP2Y4MGQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgYXV0aGVudGljYXRvcnMgZnJvbSAnLi9hdXRoZW50aWNhdG9ycy5qcyc7XG5pbXBvcnQgKiBhcyB1dGlscyBmcm9tICcuL3V0aWxzLmpzJztcbmNvbnN0IHV0ZjhEZWNvZGVyID0gbmV3IFRleHREZWNvZGVyKCd1dGYtOCcpO1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlQ2xpZW50KGRhdGEpIHtcbiAgICBpZiAodHlwZW9mIGRhdGEgPT0gJ3N0cmluZycpXG4gICAgICAgIGRhdGEgPSB1dGlscy5wYXJzZUJhc2U2NHVybChkYXRhKTtcbiAgICByZXR1cm4gSlNPTi5wYXJzZSh1dGY4RGVjb2Rlci5kZWNvZGUoZGF0YSkpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlQXV0aGVudGljYXRvcihkYXRhKSB7XG4gICAgaWYgKHR5cGVvZiBkYXRhID09ICdzdHJpbmcnKVxuICAgICAgICBkYXRhID0gdXRpbHMucGFyc2VCYXNlNjR1cmwoZGF0YSk7XG4gICAgcmV0dXJuIGF1dGhlbnRpY2F0b3JzLnBhcnNlQXV0aEJ1ZmZlcihkYXRhKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUF0dGVzdGF0aW9uKGRhdGEpIHtcbiAgICAvL2lmKHR5cGVvZiBkYXRhID09ICdzdHJpbmcnKVxuICAgIC8vICAgIGRhdGEgPSB1dGlscy5wYXJzZUJhc2U2NHVybChkYXRhKVxuICAgIC8vIFVzZWxlc3MgY29tbWVudCwgbGV0J3MgYXQgbGVhc3QgcHJvdmlkZSB0aGUgcmF3IHZhbHVlIFxuICAgIC8vIHJldHVybiBcIlRoZSBkZXZpY2UgYXR0ZXN0YXRpb24gcHJvdmVzIHRoZSBhdXRoZW50aWNpdHkgb2YgdGhlIGRldmljZSBtb2RlbCAvIGFhZ3VpZC4gSXQncyBub3QgZ3VhcmFudGVlZCB0byBiZSBpbmNsdWRlZCBhbmQgcmVhbGx5IGNvbXBsZXggdG8gcGFyc2UgLyB2ZXJpZnkuIEdvb2QgbHVjayB3aXRoIHRoYXQgb25lIVwiXG4gICAgcmV0dXJuIGRhdGE7XG59XG5leHBvcnQgZnVuY3Rpb24gcGFyc2VSZWdpc3RyYXRpb24ocmVnaXN0cmF0aW9uKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdXNlcm5hbWU6IHJlZ2lzdHJhdGlvbi51c2VybmFtZSxcbiAgICAgICAgY3JlZGVudGlhbDogcmVnaXN0cmF0aW9uLmNyZWRlbnRpYWwsXG4gICAgICAgIGNsaWVudDogcGFyc2VDbGllbnQocmVnaXN0cmF0aW9uLmNsaWVudERhdGEpLFxuICAgICAgICBhdXRoZW50aWNhdG9yOiBwYXJzZUF1dGhlbnRpY2F0b3IocmVnaXN0cmF0aW9uLmF1dGhlbnRpY2F0b3JEYXRhKSxcbiAgICAgICAgYXR0ZXN0YXRpb246IHJlZ2lzdHJhdGlvbi5hdHRlc3RhdGlvbkRhdGEgPyBwYXJzZUF0dGVzdGF0aW9uKHJlZ2lzdHJhdGlvbi5hdHRlc3RhdGlvbkRhdGEpIDogbnVsbFxuICAgIH07XG59XG5leHBvcnQgZnVuY3Rpb24gcGFyc2VBdXRoZW50aWNhdGlvbihhdXRoZW50aWNhdGlvbikge1xuICAgIHJldHVybiB7XG4gICAgICAgIGNyZWRlbnRpYWxJZDogYXV0aGVudGljYXRpb24uY3JlZGVudGlhbElkLFxuICAgICAgICBjbGllbnQ6IHBhcnNlQ2xpZW50KGF1dGhlbnRpY2F0aW9uLmNsaWVudERhdGEpLFxuICAgICAgICBhdXRoZW50aWNhdG9yOiBwYXJzZUF1dGhlbnRpY2F0b3IoYXV0aGVudGljYXRpb24uYXV0aGVudGljYXRvckRhdGEpLFxuICAgICAgICBzaWduYXR1cmU6IGF1dGhlbnRpY2F0aW9uLnNpZ25hdHVyZVxuICAgIH07XG59XG4iXSwibmFtZXMiOlsiYXV0aGVudGljYXRvcnMiLCJ1dGlscyIsInV0ZjhEZWNvZGVyIiwiVGV4dERlY29kZXIiLCJwYXJzZUNsaWVudCIsImRhdGEiLCJwYXJzZUJhc2U2NHVybCIsIkpTT04iLCJwYXJzZSIsImRlY29kZSIsInBhcnNlQXV0aGVudGljYXRvciIsInBhcnNlQXV0aEJ1ZmZlciIsInBhcnNlQXR0ZXN0YXRpb24iLCJwYXJzZVJlZ2lzdHJhdGlvbiIsInJlZ2lzdHJhdGlvbiIsInVzZXJuYW1lIiwiY3JlZGVudGlhbCIsImNsaWVudCIsImNsaWVudERhdGEiLCJhdXRoZW50aWNhdG9yIiwiYXV0aGVudGljYXRvckRhdGEiLCJhdHRlc3RhdGlvbiIsImF0dGVzdGF0aW9uRGF0YSIsInBhcnNlQXV0aGVudGljYXRpb24iLCJhdXRoZW50aWNhdGlvbiIsImNyZWRlbnRpYWxJZCIsInNpZ25hdHVyZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@passwordless-id/webauthn/dist/esm/parsers.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@passwordless-id/webauthn/dist/esm/server.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@passwordless-id/webauthn/dist/esm/server.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   verifyAuthentication: () => (/* binding */ verifyAuthentication),\n/* harmony export */   verifyRegistration: () => (/* binding */ verifyRegistration),\n/* harmony export */   verifySignature: () => (/* binding */ verifySignature)\n/* harmony export */ });\n/* harmony import */ var _parsers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./parsers.js */ \"(ssr)/./node_modules/@passwordless-id/webauthn/dist/esm/parsers.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/@passwordless-id/webauthn/dist/esm/utils.js\");\n\n\nasync function isValid(validator, value) {\n    if (typeof validator === \"function\") {\n        const res = validator(value);\n        if (res instanceof Promise) return await res;\n        else return res;\n    }\n    // the validator can be a single value too\n    return validator === value;\n}\nasync function isNotValid(validator, value) {\n    return !await isValid(validator, value);\n}\nasync function verifyRegistration(registrationRaw, expected) {\n    const registration = (0,_parsers_js__WEBPACK_IMPORTED_MODULE_0__.parseRegistration)(registrationRaw);\n    if (registration.client.type !== \"webauthn.create\") throw new Error(`Unexpected ClientData type: ${registration.client.type}`);\n    if (await isNotValid(expected.origin, registration.client.origin)) throw new Error(`Unexpected ClientData origin: ${registration.client.origin}`);\n    if (await isNotValid(expected.challenge, registration.client.challenge)) throw new Error(`Unexpected ClientData challenge: ${registration.client.challenge}`);\n    return registration;\n}\nasync function verifyAuthentication(authenticationRaw, credential, expected) {\n    if (authenticationRaw.credentialId !== credential.id) throw new Error(`Credential ID mismatch: ${authenticationRaw.credentialId} vs ${credential.id}`);\n    const isValidSignature = await verifySignature({\n        algorithm: credential.algorithm,\n        publicKey: credential.publicKey,\n        authenticatorData: authenticationRaw.authenticatorData,\n        clientData: authenticationRaw.clientData,\n        signature: authenticationRaw.signature,\n        verbose: expected.verbose\n    });\n    if (!isValidSignature) throw new Error(`Invalid signature: ${authenticationRaw.signature}`);\n    const authentication = (0,_parsers_js__WEBPACK_IMPORTED_MODULE_0__.parseAuthentication)(authenticationRaw);\n    if (expected.verbose) console.debug(authentication);\n    if (authentication.client.type !== \"webauthn.get\") throw new Error(`Unexpected clientData type: ${authentication.client.type}`);\n    if (await isNotValid(expected.origin, authentication.client.origin)) throw new Error(`Unexpected ClientData origin: ${authentication.client.origin}`);\n    if (await isNotValid(expected.challenge, authentication.client.challenge)) throw new Error(`Unexpected ClientData challenge: ${authentication.client.challenge}`);\n    // this only works because we consider `rp.origin` and `rp.id` to be the same during authentication/registration\n    const rpId = expected.domain ?? new URL(authentication.client.origin).hostname;\n    const expectedRpIdHash = _utils_js__WEBPACK_IMPORTED_MODULE_1__.toBase64url(await _utils_js__WEBPACK_IMPORTED_MODULE_1__.sha256(_utils_js__WEBPACK_IMPORTED_MODULE_1__.toBuffer(rpId)));\n    if (authentication.authenticator.rpIdHash !== expectedRpIdHash) throw new Error(`Unexpected RpIdHash: ${authentication.authenticator.rpIdHash} vs ${expectedRpIdHash}`);\n    if (!authentication.authenticator.flags.userPresent) throw new Error(`Unexpected authenticator flags: missing userPresent`);\n    if (!authentication.authenticator.flags.userVerified && expected.userVerified) throw new Error(`Unexpected authenticator flags: missing userVerified`);\n    if (expected.counter && authentication.authenticator.counter <= expected.counter) throw new Error(`Unexpected authenticator counter: ${authentication.authenticator.counter} (should be > ${expected.counter})`);\n    return authentication;\n}\n// https://w3c.github.io/webauthn/#sctn-public-key-easy\n// https://www.iana.org/assignments/cose/cose.xhtml#algorithms\n/*\nUser agents MUST be able to return a non-null value for getPublicKey() when the credential public key has a COSEAlgorithmIdentifier value of:\n\n-7 (ES256), where kty is 2 (with uncompressed points) and crv is 1 (P-256).\n\n-257 (RS256).\n\n-8 (EdDSA), where crv is 6 (Ed25519).\n*/ function getAlgoParams(algorithm) {\n    switch(algorithm){\n        case \"RS256\":\n            return {\n                name: \"RSASSA-PKCS1-v1_5\",\n                hash: \"SHA-256\"\n            };\n        case \"ES256\":\n            return {\n                name: \"ECDSA\",\n                namedCurve: \"P-256\",\n                hash: \"SHA-256\"\n            };\n        // case 'EdDSA': Not supported by browsers\n        default:\n            throw new Error(`Unknown or unsupported crypto algorithm: ${algorithm}. Only 'RS256' and 'ES256' are supported.`);\n    }\n}\nasync function parseCryptoKey(algoParams, publicKey) {\n    const buffer = _utils_js__WEBPACK_IMPORTED_MODULE_1__.parseBase64url(publicKey);\n    return crypto.subtle.importKey(\"spki\", buffer, algoParams, false, [\n        \"verify\"\n    ]);\n}\n// https://w3c.github.io/webauthn/#sctn-verifying-assertion\n// https://w3c.github.io/webauthn/#sctn-signature-attestation-types\n/* Emphasis mine:\n\n6.5.6. Signature Formats for Packed Attestation, FIDO U2F Attestation, and **Assertion Signatures**\n\n[...] For COSEAlgorithmIdentifier -7 (ES256) [...] the sig value MUST be encoded as an ASN.1 [...]\n[...] For COSEAlgorithmIdentifier -257 (RS256) [...] The signature is not ASN.1 wrapped.\n[...] For COSEAlgorithmIdentifier -37 (PS256) [...] The signature is not ASN.1 wrapped.\n*/ // see also https://gist.github.com/philholden/50120652bfe0498958fd5926694ba354\nasync function verifySignature({ algorithm, publicKey, authenticatorData, clientData, signature, verbose }) {\n    const algoParams = getAlgoParams(algorithm);\n    let cryptoKey = await parseCryptoKey(algoParams, publicKey);\n    if (verbose) {\n        console.debug(cryptoKey);\n    }\n    let clientHash = await _utils_js__WEBPACK_IMPORTED_MODULE_1__.sha256(_utils_js__WEBPACK_IMPORTED_MODULE_1__.parseBase64url(clientData));\n    // during \"login\", the authenticatorData is exactly 37 bytes\n    let comboBuffer = _utils_js__WEBPACK_IMPORTED_MODULE_1__.concatenateBuffers(_utils_js__WEBPACK_IMPORTED_MODULE_1__.parseBase64url(authenticatorData), clientHash);\n    if (verbose) {\n        console.debug(\"Crypto Algo: \" + JSON.stringify(algoParams));\n        console.debug(\"Public key: \" + publicKey);\n        console.debug(\"Data: \" + _utils_js__WEBPACK_IMPORTED_MODULE_1__.toBase64url(comboBuffer));\n        console.debug(\"Signature: \" + signature);\n    }\n    // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/verify\n    let signatureBuffer = _utils_js__WEBPACK_IMPORTED_MODULE_1__.parseBase64url(signature);\n    if (algorithm == \"ES256\") signatureBuffer = convertASN1toRaw(signatureBuffer);\n    const isValid = await crypto.subtle.verify(algoParams, cryptoKey, signatureBuffer, comboBuffer);\n    return isValid;\n}\nfunction convertASN1toRaw(signatureBuffer) {\n    // Convert signature from ASN.1 sequence to \"raw\" format\n    const usignature = new Uint8Array(signatureBuffer);\n    const rStart = usignature[4] === 0 ? 5 : 4;\n    const rEnd = rStart + 32;\n    const sStart = usignature[rEnd + 2] === 0 ? rEnd + 3 : rEnd + 2;\n    const r = usignature.slice(rStart, rEnd);\n    const s = usignature.slice(sStart);\n    return new Uint8Array([\n        ...r,\n        ...s\n    ]);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHBhc3N3b3JkbGVzcy1pZC93ZWJhdXRobi9kaXN0L2VzbS9zZXJ2ZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBc0U7QUFDbEM7QUFDcEMsZUFBZUcsUUFBUUMsU0FBUyxFQUFFQyxLQUFLO0lBQ25DLElBQUksT0FBT0QsY0FBYyxZQUFZO1FBQ2pDLE1BQU1FLE1BQU1GLFVBQVVDO1FBQ3RCLElBQUlDLGVBQWVDLFNBQ2YsT0FBTyxNQUFNRDthQUViLE9BQU9BO0lBQ2Y7SUFDQSwwQ0FBMEM7SUFDMUMsT0FBT0YsY0FBY0M7QUFDekI7QUFDQSxlQUFlRyxXQUFXSixTQUFTLEVBQUVDLEtBQUs7SUFDdEMsT0FBTyxDQUFFLE1BQU1GLFFBQVFDLFdBQVdDO0FBQ3RDO0FBQ08sZUFBZUksbUJBQW1CQyxlQUFlLEVBQUVDLFFBQVE7SUFDOUQsTUFBTUMsZUFBZVgsOERBQWlCQSxDQUFDUztJQUN2QyxJQUFJRSxhQUFhQyxNQUFNLENBQUNDLElBQUksS0FBSyxtQkFDN0IsTUFBTSxJQUFJQyxNQUFNLENBQUMsNEJBQTRCLEVBQUVILGFBQWFDLE1BQU0sQ0FBQ0MsSUFBSSxDQUFDLENBQUM7SUFDN0UsSUFBSSxNQUFNTixXQUFXRyxTQUFTSyxNQUFNLEVBQUVKLGFBQWFDLE1BQU0sQ0FBQ0csTUFBTSxHQUM1RCxNQUFNLElBQUlELE1BQU0sQ0FBQyw4QkFBOEIsRUFBRUgsYUFBYUMsTUFBTSxDQUFDRyxNQUFNLENBQUMsQ0FBQztJQUNqRixJQUFJLE1BQU1SLFdBQVdHLFNBQVNNLFNBQVMsRUFBRUwsYUFBYUMsTUFBTSxDQUFDSSxTQUFTLEdBQ2xFLE1BQU0sSUFBSUYsTUFBTSxDQUFDLGlDQUFpQyxFQUFFSCxhQUFhQyxNQUFNLENBQUNJLFNBQVMsQ0FBQyxDQUFDO0lBQ3ZGLE9BQU9MO0FBQ1g7QUFDTyxlQUFlTSxxQkFBcUJDLGlCQUFpQixFQUFFQyxVQUFVLEVBQUVULFFBQVE7SUFDOUUsSUFBSVEsa0JBQWtCRSxZQUFZ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Q1g7QUFDQSxTQUFTK0QsaUJBQWlCRCxlQUFlO0lBQ3JDLHdEQUF3RDtJQUN4RCxNQUFNRyxhQUFhLElBQUlDLFdBQVdKO0lBQ2xDLE1BQU1LLFNBQVNGLFVBQVUsQ0FBQyxFQUFFLEtBQUssSUFBSSxJQUFJO0lBQ3pDLE1BQU1HLE9BQU9ELFNBQVM7SUFDdEIsTUFBTUUsU0FBU0osVUFBVSxDQUFDRyxPQUFPLEVBQUUsS0FBSyxJQUFJQSxPQUFPLElBQUlBLE9BQU87SUFDOUQsTUFBTUUsSUFBSUwsV0FBV00sS0FBSyxDQUFDSixRQUFRQztJQUNuQyxNQUFNSSxJQUFJUCxXQUFXTSxLQUFLLENBQUNGO0lBQzNCLE9BQU8sSUFBSUgsV0FBVztXQUFJSTtXQUFNRTtLQUFFO0FBQ3RDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2xpZW50Ly4vbm9kZV9tb2R1bGVzL0BwYXNzd29yZGxlc3MtaWQvd2ViYXV0aG4vZGlzdC9lc20vc2VydmVyLmpzP2IxZmUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcGFyc2VBdXRoZW50aWNhdGlvbiwgcGFyc2VSZWdpc3RyYXRpb24gfSBmcm9tIFwiLi9wYXJzZXJzLmpzXCI7XG5pbXBvcnQgKiBhcyB1dGlscyBmcm9tICcuL3V0aWxzLmpzJztcbmFzeW5jIGZ1bmN0aW9uIGlzVmFsaWQodmFsaWRhdG9yLCB2YWx1ZSkge1xuICAgIGlmICh0eXBlb2YgdmFsaWRhdG9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGNvbnN0IHJlcyA9IHZhbGlkYXRvcih2YWx1ZSk7XG4gICAgICAgIGlmIChyZXMgaW5zdGFuY2VvZiBQcm9taXNlKVxuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHJlcztcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG4gICAgLy8gdGhlIHZhbGlkYXRvciBjYW4gYmUgYSBzaW5nbGUgdmFsdWUgdG9vXG4gICAgcmV0dXJuIHZhbGlkYXRvciA9PT0gdmFsdWU7XG59XG5hc3luYyBmdW5jdGlvbiBpc05vdFZhbGlkKHZhbGlkYXRvciwgdmFsdWUpIHtcbiAgICByZXR1cm4gIShhd2FpdCBpc1ZhbGlkKHZhbGlkYXRvciwgdmFsdWUpKTtcbn1cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB2ZXJpZnlSZWdpc3RyYXRpb24ocmVnaXN0cmF0aW9uUmF3LCBleHBlY3RlZCkge1xuICAgIGNvbnN0IHJlZ2lzdHJhdGlvbiA9IHBhcnNlUmVnaXN0cmF0aW9uKHJlZ2lzdHJhdGlvblJhdyk7XG4gICAgaWYgKHJlZ2lzdHJhdGlvbi5jbGllbnQudHlwZSAhPT0gXCJ3ZWJhdXRobi5jcmVhdGVcIilcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmV4cGVjdGVkIENsaWVudERhdGEgdHlwZTogJHtyZWdpc3RyYXRpb24uY2xpZW50LnR5cGV9YCk7XG4gICAgaWYgKGF3YWl0IGlzTm90VmFsaWQoZXhwZWN0ZWQub3JpZ2luLCByZWdpc3RyYXRpb24uY2xpZW50Lm9yaWdpbikpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5leHBlY3RlZCBDbGllbnREYXRhIG9yaWdpbjogJHtyZWdpc3RyYXRpb24uY2xpZW50Lm9yaWdpbn1gKTtcbiAgICBpZiAoYXdhaXQgaXNOb3RWYWxpZChleHBlY3RlZC5jaGFsbGVuZ2UsIHJlZ2lzdHJhdGlvbi5jbGllbnQuY2hhbGxlbmdlKSlcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmV4cGVjdGVkIENsaWVudERhdGEgY2hhbGxlbmdlOiAke3JlZ2lzdHJhdGlvbi5jbGllbnQuY2hhbGxlbmdlfWApO1xuICAgIHJldHVybiByZWdpc3RyYXRpb247XG59XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gdmVyaWZ5QXV0aGVudGljYXRpb24oYXV0aGVudGljYXRpb25SYXcsIGNyZWRlbnRpYWwsIGV4cGVjdGVkKSB7XG4gICAgaWYgKGF1dGhlbnRpY2F0aW9uUmF3LmNyZWRlbnRpYWxJZCAhPT0gY3JlZGVudGlhbC5pZClcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDcmVkZW50aWFsIElEIG1pc21hdGNoOiAke2F1dGhlbnRpY2F0aW9uUmF3LmNyZWRlbnRpYWxJZH0gdnMgJHtjcmVkZW50aWFsLmlkfWApO1xuICAgIGNvbnN0IGlzVmFsaWRTaWduYXR1cmUgPSBhd2FpdCB2ZXJpZnlTaWduYXR1cmUoe1xuICAgICAgICBhbGdvcml0aG06IGNyZWRlbnRpYWwuYWxnb3JpdGhtLFxuICAgICAgICBwdWJsaWNLZXk6IGNyZWRlbnRpYWwucHVibGljS2V5LFxuICAgICAgICBhdXRoZW50aWNhdG9yRGF0YTogYXV0aGVudGljYXRpb25SYXcuYXV0aGVudGljYXRvckRhdGEsXG4gICAgICAgIGNsaWVudERhdGE6IGF1dGhlbnRpY2F0aW9uUmF3LmNsaWVudERhdGEsXG4gICAgICAgIHNpZ25hdHVyZTogYXV0aGVudGljYXRpb25SYXcuc2lnbmF0dXJlLFxuICAgICAgICB2ZXJib3NlOiBleHBlY3RlZC52ZXJib3NlXG4gICAgfSk7XG4gICAgaWYgKCFpc1ZhbGlkU2lnbmF0dXJlKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgc2lnbmF0dXJlOiAke2F1dGhlbnRpY2F0aW9uUmF3LnNpZ25hdHVyZX1gKTtcbiAgICBjb25zdCBhdXRoZW50aWNhdGlvbiA9IHBhcnNlQXV0aGVudGljYXRpb24oYXV0aGVudGljYXRpb25SYXcpO1xuICAgIGlmIChleHBlY3RlZC52ZXJib3NlKVxuICAgICAgICBjb25zb2xlLmRlYnVnKGF1dGhlbnRpY2F0aW9uKTtcbiAgICBpZiAoYXV0aGVudGljYXRpb24uY2xpZW50LnR5cGUgIT09IFwid2ViYXV0aG4uZ2V0XCIpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5leHBlY3RlZCBjbGllbnREYXRhIHR5cGU6ICR7YXV0aGVudGljYXRpb24uY2xpZW50LnR5cGV9YCk7XG4gICAgaWYgKGF3YWl0IGlzTm90VmFsaWQoZXhwZWN0ZWQub3JpZ2luLCBhdXRoZW50aWNhdGlvbi5jbGllbnQub3JpZ2luKSlcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmV4cGVjdGVkIENsaWVudERhdGEgb3JpZ2luOiAke2F1dGhlbnRpY2F0aW9uLmNsaWVudC5vcmlnaW59YCk7XG4gICAgaWYgKGF3YWl0IGlzTm90VmFsaWQoZXhwZWN0ZWQuY2hhbGxlbmdlLCBhdXRoZW50aWNhdGlvbi5jbGllbnQuY2hhbGxlbmdlKSlcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmV4cGVjdGVkIENsaWVudERhdGEgY2hhbGxlbmdlOiAke2F1dGhlbnRpY2F0aW9uLmNsaWVudC5jaGFsbGVuZ2V9YCk7XG4gICAgLy8gdGhpcyBvbmx5IHdvcmtzIGJlY2F1c2Ugd2UgY29uc2lkZXIgYHJwLm9yaWdpbmAgYW5kIGBycC5pZGAgdG8gYmUgdGhlIHNhbWUgZHVyaW5nIGF1dGhlbnRpY2F0aW9uL3JlZ2lzdHJhdGlvblxuICAgIGNvbnN0IHJwSWQgPSBleHBlY3RlZC5kb21haW4gPz8gbmV3IFVSTChhdXRoZW50aWNhdGlvbi5jbGllbnQub3JpZ2luKS5ob3N0bmFtZTtcbiAgICBjb25zdCBleHBlY3RlZFJwSWRIYXNoID0gdXRpbHMudG9CYXNlNjR1cmwoYXdhaXQgdXRpbHMuc2hhMjU2KHV0aWxzLnRvQnVmZmVyKHJwSWQpKSk7XG4gICAgaWYgKGF1dGhlbnRpY2F0aW9uLmF1dGhlbnRpY2F0b3IucnBJZEhhc2ggIT09IGV4cGVjdGVkUnBJZEhhc2gpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5leHBlY3RlZCBScElkSGFzaDogJHthdXRoZW50aWNhdGlvbi5hdXRoZW50aWNhdG9yLnJwSWRIYXNofSB2cyAke2V4cGVjdGVkUnBJZEhhc2h9YCk7XG4gICAgaWYgKCFhdXRoZW50aWNhdGlvbi5hdXRoZW50aWNhdG9yLmZsYWdzLnVzZXJQcmVzZW50KVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVuZXhwZWN0ZWQgYXV0aGVudGljYXRvciBmbGFnczogbWlzc2luZyB1c2VyUHJlc2VudGApO1xuICAgIGlmICghYXV0aGVudGljYXRpb24uYXV0aGVudGljYXRvci5mbGFncy51c2VyVmVyaWZpZWQgJiYgZXhwZWN0ZWQudXNlclZlcmlmaWVkKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVuZXhwZWN0ZWQgYXV0aGVudGljYXRvciBmbGFnczogbWlzc2luZyB1c2VyVmVyaWZpZWRgKTtcbiAgICBpZiAoZXhwZWN0ZWQuY291bnRlciAmJiBhdXRoZW50aWNhdGlvbi5hdXRoZW50aWNhdG9yLmNvdW50ZXIgPD0gZXhwZWN0ZWQuY291bnRlcilcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmV4cGVjdGVkIGF1dGhlbnRpY2F0b3IgY291bnRlcjogJHthdXRoZW50aWNhdGlvbi5hdXRoZW50aWNhdG9yLmNvdW50ZXJ9IChzaG91bGQgYmUgPiAke2V4cGVjdGVkLmNvdW50ZXJ9KWApO1xuICAgIHJldHVybiBhdXRoZW50aWNhdGlvbjtcbn1cbi8vIGh0dHBzOi8vdzNjLmdpdGh1Yi5pby93ZWJhdXRobi8jc2N0bi1wdWJsaWMta2V5LWVhc3lcbi8vIGh0dHBzOi8vd3d3LmlhbmEub3JnL2Fzc2lnbm1lbnRzL2Nvc2UvY29zZS54aHRtbCNhbGdvcml0aG1zXG4vKlxuVXNlciBhZ2VudHMgTVVTVCBiZSBhYmxlIHRvIHJldHVybiBhIG5vbi1udWxsIHZhbHVlIGZvciBnZXRQdWJsaWNLZXkoKSB3aGVuIHRoZSBjcmVkZW50aWFsIHB1YmxpYyBrZXkgaGFzIGEgQ09TRUFsZ29yaXRobUlkZW50aWZpZXIgdmFsdWUgb2Y6XG5cbi03IChFUzI1NiksIHdoZXJlIGt0eSBpcyAyICh3aXRoIHVuY29tcHJlc3NlZCBwb2ludHMpIGFuZCBjcnYgaXMgMSAoUC0yNTYpLlxuXG4tMjU3IChSUzI1NikuXG5cbi04IChFZERTQSksIHdoZXJlIGNydiBpcyA2IChFZDI1NTE5KS5cbiovXG5mdW5jdGlvbiBnZXRBbGdvUGFyYW1zKGFsZ29yaXRobSkge1xuICAgIHN3aXRjaCAoYWxnb3JpdGhtKSB7XG4gICAgICAgIGNhc2UgJ1JTMjU2JzpcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgbmFtZTogJ1JTQVNTQS1QS0NTMS12MV81JyxcbiAgICAgICAgICAgICAgICBoYXNoOiAnU0hBLTI1NidcbiAgICAgICAgICAgIH07XG4gICAgICAgIGNhc2UgJ0VTMjU2JzpcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgbmFtZTogJ0VDRFNBJyxcbiAgICAgICAgICAgICAgICBuYW1lZEN1cnZlOiAnUC0yNTYnLFxuICAgICAgICAgICAgICAgIGhhc2g6ICdTSEEtMjU2JyxcbiAgICAgICAgICAgIH07XG4gICAgICAgIC8vIGNhc2UgJ0VkRFNBJzogTm90IHN1cHBvcnRlZCBieSBicm93c2Vyc1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmtub3duIG9yIHVuc3VwcG9ydGVkIGNyeXB0byBhbGdvcml0aG06ICR7YWxnb3JpdGhtfS4gT25seSAnUlMyNTYnIGFuZCAnRVMyNTYnIGFyZSBzdXBwb3J0ZWQuYCk7XG4gICAgfVxufVxuYXN5bmMgZnVuY3Rpb24gcGFyc2VDcnlwdG9LZXkoYWxnb1BhcmFtcywgcHVibGljS2V5KSB7XG4gICAgY29uc3QgYnVmZmVyID0gdXRpbHMucGFyc2VCYXNlNjR1cmwocHVibGljS2V5KTtcbiAgICByZXR1cm4gY3J5cHRvLnN1YnRsZS5pbXBvcnRLZXkoJ3Nwa2knLCBidWZmZXIsIGFsZ29QYXJhbXMsIGZhbHNlLCBbJ3ZlcmlmeSddKTtcbn1cbi8vIGh0dHBzOi8vdzNjLmdpdGh1Yi5pby93ZWJhdXRobi8jc2N0bi12ZXJpZnlpbmctYXNzZXJ0aW9uXG4vLyBodHRwczovL3czYy5naXRodWIuaW8vd2ViYXV0aG4vI3NjdG4tc2lnbmF0dXJlLWF0dGVzdGF0aW9uLXR5cGVzXG4vKiBFbXBoYXNpcyBtaW5lOlxuXG42LjUuNi4gU2lnbmF0dXJlIEZvcm1hdHMgZm9yIFBhY2tlZCBBdHRlc3RhdGlvbiwgRklETyBVMkYgQXR0ZXN0YXRpb24sIGFuZCAqKkFzc2VydGlvbiBTaWduYXR1cmVzKipcblxuWy4uLl0gRm9yIENPU0VBbGdvcml0aG1JZGVudGlmaWVyIC03IChFUzI1NikgWy4uLl0gdGhlIHNpZyB2YWx1ZSBNVVNUIGJlIGVuY29kZWQgYXMgYW4gQVNOLjEgWy4uLl1cblsuLi5dIEZvciBDT1NFQWxnb3JpdGhtSWRlbnRpZmllciAtMjU3IChSUzI1NikgWy4uLl0gVGhlIHNpZ25hdHVyZSBpcyBub3QgQVNOLjEgd3JhcHBlZC5cblsuLi5dIEZvciBDT1NFQWxnb3JpdGhtSWRlbnRpZmllciAtMzcgKFBTMjU2KSBbLi4uXSBUaGUgc2lnbmF0dXJlIGlzIG5vdCBBU04uMSB3cmFwcGVkLlxuKi9cbi8vIHNlZSBhbHNvIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL3BoaWxob2xkZW4vNTAxMjA2NTJiZmUwNDk4OTU4ZmQ1OTI2Njk0YmEzNTRcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB2ZXJpZnlTaWduYXR1cmUoeyBhbGdvcml0aG0sIHB1YmxpY0tleSwgYXV0aGVudGljYXRvckRhdGEsIGNsaWVudERhdGEsIHNpZ25hdHVyZSwgdmVyYm9zZSB9KSB7XG4gICAgY29uc3QgYWxnb1BhcmFtcyA9IGdldEFsZ29QYXJhbXMoYWxnb3JpdGhtKTtcbiAgICBsZXQgY3J5cHRvS2V5ID0gYXdhaXQgcGFyc2VDcnlwdG9LZXkoYWxnb1BhcmFtcywgcHVibGljS2V5KTtcbiAgICBpZiAodmVyYm9zZSkge1xuICAgICAgICBjb25zb2xlLmRlYnVnKGNyeXB0b0tleSk7XG4gICAgfVxuICAgIGxldCBjbGllbnRIYXNoID0gYXdhaXQgdXRpbHMuc2hhMjU2KHV0aWxzLnBhcnNlQmFzZTY0dXJsKGNsaWVudERhdGEpKTtcbiAgICAvLyBkdXJpbmcgXCJsb2dpblwiLCB0aGUgYXV0aGVudGljYXRvckRhdGEgaXMgZXhhY3RseSAzNyBieXRlc1xuICAgIGxldCBjb21ib0J1ZmZlciA9IHV0aWxzLmNvbmNhdGVuYXRlQnVmZmVycyh1dGlscy5wYXJzZUJhc2U2NHVybChhdXRoZW50aWNhdG9yRGF0YSksIGNsaWVudEhhc2gpO1xuICAgIGlmICh2ZXJib3NlKSB7XG4gICAgICAgIGNvbnNvbGUuZGVidWcoJ0NyeXB0byBBbGdvOiAnICsgSlNPTi5zdHJpbmdpZnkoYWxnb1BhcmFtcykpO1xuICAgICAgICBjb25zb2xlLmRlYnVnKCdQdWJsaWMga2V5OiAnICsgcHVibGljS2V5KTtcbiAgICAgICAgY29uc29sZS5kZWJ1ZygnRGF0YTogJyArIHV0aWxzLnRvQmFzZTY0dXJsKGNvbWJvQnVmZmVyKSk7XG4gICAgICAgIGNvbnNvbGUuZGVidWcoJ1NpZ25hdHVyZTogJyArIHNpZ25hdHVyZSk7XG4gICAgfVxuICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9TdWJ0bGVDcnlwdG8vdmVyaWZ5XG4gICAgbGV0IHNpZ25hdHVyZUJ1ZmZlciA9IHV0aWxzLnBhcnNlQmFzZTY0dXJsKHNpZ25hdHVyZSk7XG4gICAgaWYgKGFsZ29yaXRobSA9PSAnRVMyNTYnKVxuICAgICAgICBzaWduYXR1cmVCdWZmZXIgPSBjb252ZXJ0QVNOMXRvUmF3KHNpZ25hdHVyZUJ1ZmZlcik7XG4gICAgY29uc3QgaXNWYWxpZCA9IGF3YWl0IGNyeXB0by5zdWJ0bGUudmVyaWZ5KGFsZ29QYXJhbXMsIGNyeXB0b0tleSwgc2lnbmF0dXJlQnVmZmVyLCBjb21ib0J1ZmZlcik7XG4gICAgcmV0dXJuIGlzVmFsaWQ7XG59XG5mdW5jdGlvbiBjb252ZXJ0QVNOMXRvUmF3KHNpZ25hdHVyZUJ1ZmZlcikge1xuICAgIC8vIENvbnZlcnQgc2lnbmF0dXJlIGZyb20gQVNOLjEgc2VxdWVuY2UgdG8gXCJyYXdcIiBmb3JtYXRcbiAgICBjb25zdCB1c2lnbmF0dXJlID0gbmV3IFVpbnQ4QXJyYXkoc2lnbmF0dXJlQnVmZmVyKTtcbiAgICBjb25zdCByU3RhcnQgPSB1c2lnbmF0dXJlWzRdID09PSAwID8gNSA6IDQ7XG4gICAgY29uc3QgckVuZCA9IHJTdGFydCArIDMyO1xuICAgIGNvbnN0IHNTdGFydCA9IHVzaWduYXR1cmVbckVuZCArIDJdID09PSAwID8gckVuZCArIDMgOiByRW5kICsgMjtcbiAgICBjb25zdCByID0gdXNpZ25hdHVyZS5zbGljZShyU3RhcnQsIHJFbmQpO1xuICAgIGNvbnN0IHMgPSB1c2lnbmF0dXJlLnNsaWNlKHNTdGFydCk7XG4gICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KFsuLi5yLCAuLi5zXSk7XG59XG4iXSwibmFtZXMiOlsicGFyc2VBdXRoZW50aWNhdGlvbiIsInBhcnNlUmVnaXN0cmF0aW9uIiwidXRpbHMiLCJpc1ZhbGlkIiwidmFsaWRhdG9yIiwidmFsdWUiLCJyZXMiLCJQcm9taXNlIiwiaXNOb3RWYWxpZCIsInZlcmlmeVJlZ2lzdHJhdGlvbiIsInJlZ2lzdHJhdGlvblJhdyIsImV4cGVjdGVkIiwicmVnaXN0cmF0aW9uIiwiY2xpZW50IiwidHlwZSIsIkVycm9yIiwib3JpZ2luIiwiY2hhbGxlbmdlIiwidmVyaWZ5QXV0aGVudGljYXRpb24iLCJhdXRoZW50aWNhdGlvblJhdyIsImNyZWRlbnRpYWwiLCJjcmVkZW50aWFsSWQiLCJpZCIsImlzVmFsaWRTaWduYXR1cmUiLCJ2ZXJpZnlTaWduYXR1cmUiLCJhbGdvcml0aG0iLCJwdWJsaWNLZXkiLCJhdXRoZW50aWNhdG9yRGF0YSIsImNsaWVudERhdGEiLCJzaWduYXR1cmUiLCJ2ZXJib3NlIiwiYXV0aGVudGljYXRpb24iLCJjb25zb2xlIiwiZGVidWciLCJycElkIiwiZG9tYWluIiwiVVJMIiwiaG9zdG5hbWUiLCJleHBlY3RlZFJwSWRIYXNoIiwidG9CYXNlNjR1cmwiLCJzaGEyNTYiLCJ0b0J1ZmZlciIsImF1dGhlbnRpY2F0b3IiLCJycElkSGFzaCIsImZsYWdzIiwidXNlclByZXNlbnQiLCJ1c2VyVmVyaWZpZWQiLCJjb3VudGVyIiwiZ2V0QWxnb1BhcmFtcyIsIm5hbWUiLCJoYXNoIiwibmFtZWRDdXJ2ZSIsInBhcnNlQ3J5cHRvS2V5IiwiYWxnb1BhcmFtcyIsImJ1ZmZlciIsInBhcnNlQmFzZTY0dXJsIiwiY3J5cHRvIiwic3VidGxlIiwiaW1wb3J0S2V5IiwiY3J5cHRvS2V5IiwiY2xpZW50SGFzaCIsImNvbWJvQnVmZmVyIiwiY29uY2F0ZW5hdGVCdWZmZXJzIiwiSlNPTiIsInN0cmluZ2lmeSIsInNpZ25hdHVyZUJ1ZmZlciIsImNvbnZlcnRBU04xdG9SYXciLCJ2ZXJpZnkiLCJ1c2lnbmF0dXJlIiwiVWludDhBcnJheSIsInJTdGFydCIsInJFbmQiLCJzU3RhcnQiLCJyIiwic2xpY2UiLCJzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@passwordless-id/webauthn/dist/esm/server.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@passwordless-id/webauthn/dist/esm/utils.js":
/*!******************************************************************!*\
  !*** ./node_modules/@passwordless-id/webauthn/dist/esm/utils.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   bufferToHex: () => (/* binding */ bufferToHex),\n/* harmony export */   concatenateBuffers: () => (/* binding */ concatenateBuffers),\n/* harmony export */   isBase64url: () => (/* binding */ isBase64url),\n/* harmony export */   parseBase64url: () => (/* binding */ parseBase64url),\n/* harmony export */   parseBuffer: () => (/* binding */ parseBuffer),\n/* harmony export */   randomChallenge: () => (/* binding */ randomChallenge),\n/* harmony export */   sha256: () => (/* binding */ sha256),\n/* harmony export */   toBase64url: () => (/* binding */ toBase64url),\n/* harmony export */   toBuffer: () => (/* binding */ toBuffer)\n/* harmony export */ });\n/********************************\n     Encoding/Decoding Utils\n********************************/ function randomChallenge() {\n    return crypto.randomUUID();\n}\nfunction toBuffer(txt) {\n    return Uint8Array.from(txt, (c)=>c.charCodeAt(0)).buffer;\n}\nfunction parseBuffer(buffer) {\n    return String.fromCharCode(...new Uint8Array(buffer));\n}\nfunction isBase64url(txt) {\n    return txt.match(/^[a-zA-Z0-9\\-_]+=*$/) !== null;\n}\nfunction toBase64url(buffer) {\n    const txt = btoa(parseBuffer(buffer)); // base64\n    return txt.replaceAll(\"+\", \"-\").replaceAll(\"/\", \"_\");\n}\nfunction parseBase64url(txt) {\n    txt = txt.replaceAll(\"-\", \"+\").replaceAll(\"_\", \"/\"); // base64url -> base64\n    return toBuffer(atob(txt));\n}\nasync function sha256(buffer) {\n    return await crypto.subtle.digest(\"SHA-256\", buffer);\n}\nfunction bufferToHex(buffer) {\n    return [\n        ...new Uint8Array(buffer)\n    ].map((b)=>b.toString(16).padStart(2, \"0\")).join(\"\");\n}\nfunction concatenateBuffers(buffer1, buffer2) {\n    var tmp = new Uint8Array(buffer1.byteLength + buffer2.byteLength);\n    tmp.set(new Uint8Array(buffer1), 0);\n    tmp.set(new Uint8Array(buffer2), buffer1.byteLength);\n    return tmp;\n}\n;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHBhc3N3b3JkbGVzcy1pZC93ZWJhdXRobi9kaXN0L2VzbS91dGlscy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQTs7K0JBRStCLEdBQ3hCLFNBQVNBO0lBQ1osT0FBT0MsT0FBT0MsVUFBVTtBQUM1QjtBQUNPLFNBQVNDLFNBQVNDLEdBQUc7SUFDeEIsT0FBT0MsV0FBV0MsSUFBSSxDQUFDRixLQUFLRyxDQUFBQSxJQUFLQSxFQUFFQyxVQUFVLENBQUMsSUFBSUMsTUFBTTtBQUM1RDtBQUNPLFNBQVNDLFlBQVlELE1BQU07SUFDOUIsT0FBT0UsT0FBT0MsWUFBWSxJQUFJLElBQUlQLFdBQVdJO0FBQ2pEO0FBQ08sU0FBU0ksWUFBWVQsR0FBRztJQUMzQixPQUFPQSxJQUFJVSxLQUFLLENBQUMsMkJBQTJCO0FBQ2hEO0FBQ08sU0FBU0MsWUFBWU4sTUFBTTtJQUM5QixNQUFNTCxNQUFNWSxLQUFLTixZQUFZRCxVQUFVLFNBQVM7SUFDaEQsT0FBT0wsSUFBSWEsVUFBVSxDQUFDLEtBQUssS0FBS0EsVUFBVSxDQUFDLEtBQUs7QUFDcEQ7QUFDTyxTQUFTQyxlQUFlZCxHQUFHO0lBQzlCQSxNQUFNQSxJQUFJYSxVQUFVLENBQUMsS0FBSyxLQUFLQSxVQUFVLENBQUMsS0FBSyxNQUFNLHNCQUFzQjtJQUMzRSxPQUFPZCxTQUFTZ0IsS0FBS2Y7QUFDekI7QUFDTyxlQUFlZ0IsT0FBT1gsTUFBTTtJQUMvQixPQUFPLE1BQU1SLE9BQU9vQixNQUFNLENBQUNDLE1BQU0sQ0FBQyxXQUFXYjtBQUNqRDtBQUNPLFNBQVNjLFlBQVlkLE1BQU07SUFDOUIsT0FBTztXQUFJLElBQUlKLFdBQVdJO0tBQVEsQ0FDN0JlLEdBQUcsQ0FBQ0MsQ0FBQUEsSUFBS0EsRUFBRUMsUUFBUSxDQUFDLElBQUlDLFFBQVEsQ0FBQyxHQUFHLE1BQ3BDQyxJQUFJLENBQUM7QUFDZDtBQUNPLFNBQVNDLG1CQUFtQkMsT0FBTyxFQUFFQyxPQUFPO0lBQy9DLElBQUlDLE1BQU0sSUFBSTNCLFdBQVd5QixRQUFRRyxVQUFVLEdBQUdGLFFBQVFFLFVBQVU7SUFDaEVELElBQUlFLEdBQUcsQ0FBQyxJQUFJN0IsV0FBV3lCLFVBQVU7SUFDakNFLElBQUlFLEdBQUcsQ0FBQyxJQUFJN0IsV0FBVzBCLFVBQVVELFFBQVFHLFVBQVU7SUFDbkQsT0FBT0Q7QUFDWCIsInNvdXJjZXMiOlsid2VicGFjazovL2NsaWVudC8uL25vZGVfbW9kdWxlcy9AcGFzc3dvcmRsZXNzLWlkL3dlYmF1dGhuL2Rpc3QvZXNtL3V0aWxzLmpzPzg5MmUiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gICAgIEVuY29kaW5nL0RlY29kaW5nIFV0aWxzXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbmV4cG9ydCBmdW5jdGlvbiByYW5kb21DaGFsbGVuZ2UoKSB7XG4gICAgcmV0dXJuIGNyeXB0by5yYW5kb21VVUlEKCk7XG59XG5leHBvcnQgZnVuY3Rpb24gdG9CdWZmZXIodHh0KSB7XG4gICAgcmV0dXJuIFVpbnQ4QXJyYXkuZnJvbSh0eHQsIGMgPT4gYy5jaGFyQ29kZUF0KDApKS5idWZmZXI7XG59XG5leHBvcnQgZnVuY3Rpb24gcGFyc2VCdWZmZXIoYnVmZmVyKSB7XG4gICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoLi4ubmV3IFVpbnQ4QXJyYXkoYnVmZmVyKSk7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNCYXNlNjR1cmwodHh0KSB7XG4gICAgcmV0dXJuIHR4dC5tYXRjaCgvXlthLXpBLVowLTlcXC1fXSs9KiQvKSAhPT0gbnVsbDtcbn1cbmV4cG9ydCBmdW5jdGlvbiB0b0Jhc2U2NHVybChidWZmZXIpIHtcbiAgICBjb25zdCB0eHQgPSBidG9hKHBhcnNlQnVmZmVyKGJ1ZmZlcikpOyAvLyBiYXNlNjRcbiAgICByZXR1cm4gdHh0LnJlcGxhY2VBbGwoJysnLCAnLScpLnJlcGxhY2VBbGwoJy8nLCAnXycpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlQmFzZTY0dXJsKHR4dCkge1xuICAgIHR4dCA9IHR4dC5yZXBsYWNlQWxsKCctJywgJysnKS5yZXBsYWNlQWxsKCdfJywgJy8nKTsgLy8gYmFzZTY0dXJsIC0+IGJhc2U2NFxuICAgIHJldHVybiB0b0J1ZmZlcihhdG9iKHR4dCkpO1xufVxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHNoYTI1NihidWZmZXIpIHtcbiAgICByZXR1cm4gYXdhaXQgY3J5cHRvLnN1YnRsZS5kaWdlc3QoJ1NIQS0yNTYnLCBidWZmZXIpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGJ1ZmZlclRvSGV4KGJ1ZmZlcikge1xuICAgIHJldHVybiBbLi4ubmV3IFVpbnQ4QXJyYXkoYnVmZmVyKV1cbiAgICAgICAgLm1hcChiID0+IGIudG9TdHJpbmcoMTYpLnBhZFN0YXJ0KDIsIFwiMFwiKSlcbiAgICAgICAgLmpvaW4oXCJcIik7XG59XG5leHBvcnQgZnVuY3Rpb24gY29uY2F0ZW5hdGVCdWZmZXJzKGJ1ZmZlcjEsIGJ1ZmZlcjIpIHtcbiAgICB2YXIgdG1wID0gbmV3IFVpbnQ4QXJyYXkoYnVmZmVyMS5ieXRlTGVuZ3RoICsgYnVmZmVyMi5ieXRlTGVuZ3RoKTtcbiAgICB0bXAuc2V0KG5ldyBVaW50OEFycmF5KGJ1ZmZlcjEpLCAwKTtcbiAgICB0bXAuc2V0KG5ldyBVaW50OEFycmF5KGJ1ZmZlcjIpLCBidWZmZXIxLmJ5dGVMZW5ndGgpO1xuICAgIHJldHVybiB0bXA7XG59XG47XG4iXSwibmFtZXMiOlsicmFuZG9tQ2hhbGxlbmdlIiwiY3J5cHRvIiwicmFuZG9tVVVJRCIsInRvQnVmZmVyIiwidHh0IiwiVWludDhBcnJheSIsImZyb20iLCJjIiwiY2hhckNvZGVBdCIsImJ1ZmZlciIsInBhcnNlQnVmZmVyIiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwiaXNCYXNlNjR1cmwiLCJtYXRjaCIsInRvQmFzZTY0dXJsIiwiYnRvYSIsInJlcGxhY2VBbGwiLCJwYXJzZUJhc2U2NHVybCIsImF0b2IiLCJzaGEyNTYiLCJzdWJ0bGUiLCJkaWdlc3QiLCJidWZmZXJUb0hleCIsIm1hcCIsImIiLCJ0b1N0cmluZyIsInBhZFN0YXJ0Iiwiam9pbiIsImNvbmNhdGVuYXRlQnVmZmVycyIsImJ1ZmZlcjEiLCJidWZmZXIyIiwidG1wIiwiYnl0ZUxlbmd0aCIsInNldCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@passwordless-id/webauthn/dist/esm/utils.js\n");

/***/ })

};
;