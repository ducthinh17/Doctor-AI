import { jsx as _jsx } from "react/jsx-runtime";
import { useCallback, useContext, useMemo, useState } from "react";
import { SetRootElementContext } from "../../../core/providers/RootElementContext.js";
import { ConnectUIContext } from "../../../core/providers/wallet-connection.js";
import { WalletUIStatesProvider } from "../../providers/wallet-ui-states-provider.js";
import { canFitWideModal } from "../../utils/canFitWideModal.js";
import { getDefaultWallets } from "../../wallets/defaultWallets.js";
import ConnectModal from "./Modal/ConnectModal.js";
import { getConnectLocale } from "./locale/getConnectLocale.js";
/**
 * hook that allows you to open the Connect UI in a Modal to prompt the user to connect wallet.
 * @example
 * ```tsx
 * import { createThirdwebClient } from "thirdweb";
 * import { useConnectModal } from "thirdweb/react";
 *
 * const client = createThirdwebClient({
 *  clientId: "<your_client_id>",
 * });
 *
 * function Example() {
 *   const { connect, isConnecting } = useConnectModal();
 *
 *   async function handleConnect() {
 *      const wallet = await connect({ client }); // opens the connect modal
 *      console.log('connected to', wallet);
 *   }
 *
 *   return <button onClick={handleConnect}> Connect </button>
 * }
 * ```
 *
 * The returned `connect` method takes an object of type [UseConnectModalOptions](https://portal.thirdweb.com/references/typescript/v5/ConnectButtonProps)
 * as an argument to customize the Connect Modal UI. Refer to [UseConnectModalOptions](https://portal.thirdweb.com/references/typescript/v5/ConnectButtonProps) to see the available options.
 *
 * @walletConnection
 */
export function useConnectModal() {
    const setRootEl = useContext(SetRootElementContext);
    const [isConnecting, setIsConnecting] = useState(false);
    const connect = useCallback((props) => {
        function cleanup() {
            setIsConnecting(false);
            setRootEl(undefined);
        }
        return new Promise((resolve, reject) => {
            setIsConnecting(true);
            getConnectLocale(props.locale || "en_US")
                .then((locale) => {
                setRootEl(_jsx(Modal, { ...props, onConnect: (w) => {
                        resolve(w);
                        cleanup();
                    }, onClose: () => {
                        reject();
                        cleanup();
                    }, connectLocale: locale }));
            })
                .catch(() => {
                reject();
                cleanup();
            });
        });
    }, [setRootEl]);
    return { connect, isConnecting };
}
function Modal(props) {
    const wallets = useMemo(() => props.wallets ||
        getDefaultWallets({
            appMetadata: props.appMetadata,
            chains: props.chains,
        }), [props.wallets, props.appMetadata, props.chains]);
    return (_jsx(ConnectUIContext.Provider, { value: {
            appMetadata: props.appMetadata,
            client: props.client,
            wallets: wallets,
            locale: props.locale || "en_US",
            connectLocale: props.connectLocale,
            chain: props.chain,
            chains: props.chains,
            walletConnect: props.walletConnect,
            accountAbstraction: props.accountAbstraction,
            recommendedWallets: props.recommendedWallets,
            showAllWallets: props.showAllWallets,
            isEmbed: false,
            connectModal: {
                privacyPolicyUrl: props.privacyPolicyUrl,
                showThirdwebBranding: props.showThirdwebBranding,
                termsOfServiceUrl: props.termsOfServiceUrl,
                title: props.title,
                welcomeScreen: props.welcomeScreen,
                titleIcon: props.titleIcon,
                size: !canFitWideModal() || wallets.length === 1
                    ? "compact"
                    : props?.size || "wide",
            },
            onConnect: props.onConnect,
        }, children: _jsx(WalletUIStatesProvider, { theme: props.theme, isOpen: true, children: _jsx(ConnectModal, { onClose: props.onClose, shouldSetActive: props.setActive === undefined ? true : props.setActive }) }) }));
}
//# sourceMappingURL=useConnectModal.js.map