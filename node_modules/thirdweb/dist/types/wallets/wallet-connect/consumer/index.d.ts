import type { ThirdwebClient } from "../../../client/client.js";
import type { Prettify } from "../../../utils/type-utils.js";
import type { Wallet } from "../../../wallets/interfaces/wallet.js";
import type { WalletConnectClient, WalletConnectConfig, WalletConnectRequestHandlers, WalletConnectSession } from "./types.js";
export type CreateWalletConnectClientOptions = Prettify<WalletConnectConfig & {
    /**
     * Your application's thirdweb client.
     */
    client: ThirdwebClient;
    /**
     * The wallet to connect to the WalletConnect URI.
     */
    wallet: Wallet;
    /**
     * Custom RPC handlers to override the defaults. Useful when creating a custom approval UI.
     */
    requestHandlers?: WalletConnectRequestHandlers;
    /**
     * Callback triggered whenever a session is successfully created.
     */
    onConnect?: (session: WalletConnectSession) => void;
    /**
     * Callback triggered whenever a session is disconnected.
     */
    onDisconnect?: (session: WalletConnectSession) => void;
}>;
export type CreateWalletConnectSessionOptions = {
    /**
     * The WalletConnect client returned from `createWalletConnectClient`
     */
    walletConnectClient: WalletConnectClient;
    /**
     * The WalletConnect session URI retrieved from the application to connect with.
     */
    uri: string;
    /**
     * Callback triggered when the session is successfully created.
     */
    onConnect?: (session: WalletConnectSession) => void;
};
/**
 * Creates a new WalletConnect client for interacting with another application.
 * @param options - The options to use to create the WalletConnect client.
 *
 * @returns The WalletConnect client. Use this client to connect to a WalletConnect URI with {@link createWalletConnectSession}.
 * @example
 * ```ts
 * import { createWalletConnectClient } from "thirdweb/wallets/wallet-connect";
 *
 * const client = await createWalletConnectClient({
 *   wallet: wallet,
 *   client: client,
 * });
 * ```
 * Pass custom handlers:
 * ```ts
 * import { createWalletConnectClient } from "thirdweb/wallets/wallet-connect";
 *
 * const client = await createWalletConnectClient({
 *   wallet: wallet,
 *   client: client,
 *   requestHandlers: {
 *     eth_signTransaction: ({ transaction }) => {
 *       // handle transaction signing
 *     },
 *   },
 * });
 * ```
 * Pass connect and disconnect callbacks:
 * ```ts
 * import { createWalletConnectClient } from "thirdweb/wallets/wallet-connect";
 *
 * const client = await createWalletConnectClient({
 *   wallet: wallet,
 *   client: client,
 *   onConnect: (session) => {
 *     console.log("Connected to WalletConnect", session);
 *   },
 *   onDisconnect: (session) => {
 *     console.log("Disconnected from WalletConnect", session);
 *   },
 * });
 * ```
 * @wallets
 */
export declare function createWalletConnectClient(options: CreateWalletConnectClientOptions): Promise<WalletConnectClient>;
/**
 * Initiates a new WalletConnect session for interacting with another application.
 * @param options - The options to use to create the WalletConnect session.
 * @example
 * ```ts
 * import { createWalletConnectClient, createWalletConnectSession } from "thirdweb/wallets/wallet-connect";
 *
 * const client = await createWalletConnectClient({
 *   wallet: wallet,
 *   client: client,
 * });
 *
 * const session = await createWalletConnectSession({
 *   walletConnectClient: client,
 *   uri: "wc:...",
 * });
 * ```
 * @wallets
 */
export declare function createWalletConnectSession(options: CreateWalletConnectSessionOptions): void;
/**
 * Retrieves all active WalletConnect sessions.
 * @returns All active WalletConnect sessions.
 * @example
 * ```ts
 * import { getActiveWalletConnectSessions } from "thirdweb/wallets/wallet-connect";
 *
 * const sessions = await getActiveWalletConnectSessions();
 * ```
 * @wallets
 */
export declare function getActiveWalletConnectSessions(): Promise<WalletConnectSession[]>;
/**
 * Disconnects a WalletConnect session.
 * @param options - The options to use to disconnect the WalletConnect session.
 * @example
 * ```ts
 * import { disconnectWalletConnectSession } from "thirdweb/wallets/wallet-connect";
 *
 * await disconnectWalletConnectSession({
 *   session: { topic: "..." },
 *   walletConnectClient: wcClient,
 * });
 * ```
 * @wallets
 */
export declare function disconnectWalletConnectSession(options: {
    session: WalletConnectSession;
    walletConnectClient: WalletConnectClient;
}): Promise<void>;
//# sourceMappingURL=index.d.ts.map