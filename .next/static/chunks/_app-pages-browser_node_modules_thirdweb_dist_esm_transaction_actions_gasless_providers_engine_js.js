"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_node_modules_thirdweb_dist_esm_transaction_actions_gasless_providers_engine_js"],{

/***/ "(app-pages-browser)/./node_modules/thirdweb/dist/esm/transaction/actions/gasless/providers/engine.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/thirdweb/dist/esm/transaction/actions/gasless/providers/engine.js ***!
  \****************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ChainAwareForwardRequest: function() { return /* binding */ ChainAwareForwardRequest; },\n/* harmony export */   ForwardRequest: function() { return /* binding */ ForwardRequest; },\n/* harmony export */   prepareEngineTransaction: function() { return /* binding */ prepareEngineTransaction; },\n/* harmony export */   relayEngineTransaction: function() { return /* binding */ relayEngineTransaction; }\n/* harmony export */ });\n/* harmony import */ var _contract_contract_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../contract/contract.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/contract/contract.js\");\n/* harmony import */ var _utils_json_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../utils/json.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/utils/json.js\");\n/* harmony import */ var _read_contract_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../read-contract.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/transaction/read-contract.js\");\n/* harmony import */ var _wait_for_tx_receipt_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../wait-for-tx-receipt.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/transaction/actions/wait-for-tx-receipt.js\");\n\n\n\n\n/**\n * @internal - only exported for testing\n */ async function prepareEngineTransaction(param) {\n    let { account, serializableTransaction, transaction, gasless } = param;\n    const forrwaderContract = (0,_contract_contract_js__WEBPACK_IMPORTED_MODULE_0__.getContract)({\n        address: gasless.relayerForwarderAddress,\n        chain: transaction.chain,\n        client: transaction.client\n    });\n    const nonce = await (0,_read_contract_js__WEBPACK_IMPORTED_MODULE_1__.readContract)({\n        contract: forrwaderContract,\n        method: \"function getNonce(address) view returns (uint256)\",\n        params: [\n            account.address\n        ]\n    });\n    const [signature, message] = await (async ()=>{\n        // TODO: handle special case for `approve` -> `permit` transactions\n        if (!serializableTransaction.to) {\n            throw new Error(\"engine transactions must have a 'to' address\");\n        }\n        if (!serializableTransaction.gas) {\n            throw new Error(\"engine transactions must have a 'gas' value\");\n        }\n        if (!serializableTransaction.data) {\n            throw new Error(\"engine transactions must have a 'data' value\");\n        }\n        // chainless support!\n        if (gasless.experimentalChainlessSupport) {\n            const message = {\n                from: account.address,\n                to: serializableTransaction.to,\n                value: 0n,\n                gas: serializableTransaction.gas,\n                nonce: nonce,\n                data: serializableTransaction.data,\n                chainid: BigInt(transaction.chain.id)\n            };\n            return [\n                await account.signTypedData({\n                    domain: {\n                        name: \"GSNv2 Forwarder\",\n                        version: \"0.0.1\",\n                        verifyingContract: forrwaderContract.address\n                    },\n                    message,\n                    primaryType: \"ForwardRequest\",\n                    types: {\n                        ForwardRequest: ChainAwareForwardRequest\n                    }\n                }),\n                message\n            ];\n        }\n        // else non-chainless support\n        const message = {\n            from: account.address,\n            to: serializableTransaction.to,\n            value: 0n,\n            gas: serializableTransaction.gas,\n            nonce: nonce,\n            data: serializableTransaction.data\n        };\n        var _gasless_domainName, _gasless_domainVersion;\n        return [\n            await account.signTypedData({\n                domain: {\n                    name: (_gasless_domainName = gasless.domainName) !== null && _gasless_domainName !== void 0 ? _gasless_domainName : \"GSNv2 Forwarder\",\n                    version: (_gasless_domainVersion = gasless.domainVersion) !== null && _gasless_domainVersion !== void 0 ? _gasless_domainVersion : \"0.0.1\",\n                    chainId: transaction.chain.id,\n                    verifyingContract: forrwaderContract.address\n                },\n                message,\n                primaryType: \"ForwardRequest\",\n                types: {\n                    ForwardRequest\n                }\n            }),\n            message\n        ];\n    })();\n    // TODO: handle special case for `approve` -> `permit`\n    const messageType = \"forward\";\n    return {\n        message,\n        signature,\n        messageType\n    };\n}\nconst ForwardRequest = [\n    {\n        name: \"from\",\n        type: \"address\"\n    },\n    {\n        name: \"to\",\n        type: \"address\"\n    },\n    {\n        name: \"value\",\n        type: \"uint256\"\n    },\n    {\n        name: \"gas\",\n        type: \"uint256\"\n    },\n    {\n        name: \"nonce\",\n        type: \"uint256\"\n    },\n    {\n        name: \"data\",\n        type: \"bytes\"\n    }\n];\nconst ChainAwareForwardRequest = [\n    {\n        name: \"from\",\n        type: \"address\"\n    },\n    {\n        name: \"to\",\n        type: \"address\"\n    },\n    {\n        name: \"value\",\n        type: \"uint256\"\n    },\n    {\n        name: \"gas\",\n        type: \"uint256\"\n    },\n    {\n        name: \"nonce\",\n        type: \"uint256\"\n    },\n    {\n        name: \"data\",\n        type: \"bytes\"\n    },\n    {\n        name: \"chainid\",\n        type: \"uint256\"\n    }\n];\n/**\n * @internal\n */ async function relayEngineTransaction(options) {\n    const { message, messageType, signature } = await prepareEngineTransaction(options);\n    const response = await fetch(options.gasless.relayerUrl, {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        body: (0,_utils_json_js__WEBPACK_IMPORTED_MODULE_2__.stringify)({\n            request: message,\n            type: messageType,\n            signature,\n            forwarderAddress: options.gasless.relayerForwarderAddress\n        })\n    });\n    if (!response.ok) {\n        throw new Error(\"Failed to send transaction: \".concat(await response.text()));\n    }\n    const json = await response.json();\n    if (!json.result) {\n        throw new Error(\"Relay transaction failed: \".concat(json.message));\n    }\n    const queueId = json.result.queueId;\n    // poll for transactionHash\n    const timeout = 60000;\n    const interval = 1000;\n    const endtime = Date.now() + timeout;\n    while(Date.now() < endtime){\n        const receipt = await fetchReceipt({\n            options,\n            queueId\n        });\n        if (receipt) {\n            return {\n                transactionHash: receipt.transactionHash,\n                chain: options.transaction.chain,\n                client: options.transaction.client\n            };\n        }\n        await new Promise((resolve)=>setTimeout(resolve, interval));\n    }\n    throw new Error(\"Failed to find relayed transaction after \".concat(timeout, \"ms\"));\n}\nasync function fetchReceipt(args) {\n    const { options, queueId } = args;\n    const url = options.gasless.relayerUrl.split(\"/relayer/\")[0];\n    const res = await fetch(\"\".concat(url, \"/transaction/status/\").concat(queueId), {\n        method: \"GET\"\n    });\n    const resJson = await res.json();\n    if (!res.ok) {\n        return null;\n    }\n    const result = resJson.result;\n    if (!result) {\n        return null;\n    }\n    switch(result.status){\n        case \"errored\":\n            throw new Error(\"Transaction errored with reason: \".concat(result.errorMessage));\n        case \"cancelled\":\n            throw new Error(\"Transaction execution cancelled.\");\n        case \"mined\":\n            {\n                const receipt = await (0,_wait_for_tx_receipt_js__WEBPACK_IMPORTED_MODULE_3__.waitForReceipt)({\n                    client: options.transaction.client,\n                    chain: options.transaction.chain,\n                    transactionHash: result.transactionHash\n                });\n                return receipt;\n            }\n        default:\n            {\n                return null;\n            }\n    }\n} //# sourceMappingURL=engine.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/thirdweb/dist/esm/transaction/actions/gasless/providers/engine.js\n"));

/***/ })

}]);