import type { Chain } from "../chains/types.js";
import type { ThirdwebClient } from "../client/client.js";
import type { Account, Wallet } from "../wallets/interfaces/wallet.js";
export type AdapterWalletOptions = {
    client: ThirdwebClient;
    adaptedAccount: Account;
    chain: Chain;
    onDisconnect: () => Promise<void> | void;
    switchChain: (chain: Chain) => Promise<void> | void;
};
/**
 * Creates a wallet from the given adapted account. Use this to convert a third party library wallet into a thirdweb wallet.
 * @param options - The options for the adapter wallet.
 * @returns a wallet instance.
 *
 * @example
 * ```ts
 * import { createWalletAdapter } from "thirdweb";
 *
 * const wallet = createWalletAdapter({
 *  client,
 *  adaptedAccount,
 *  chain,
 *  onDisconnect: () => {
 *    // disconnect logic
 *  },
 *  switchChain: async (chain) => {
 *    // switch chain logic
 *  },
 * });
 * ```
 * @wallet
 */
export declare function createWalletAdapter(options: AdapterWalletOptions): Wallet<"adapter">;
//# sourceMappingURL=wallet-adapter.d.ts.map