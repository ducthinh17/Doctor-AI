"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_node_modules_thirdweb_dist_esm_storage_upload_js"],{

/***/ "(app-pages-browser)/./node_modules/thirdweb/dist/esm/storage/upload.js":
/*!**********************************************************!*\
  !*** ./node_modules/thirdweb/dist/esm/storage/upload.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   upload: function() { return /* binding */ upload; }\n/* harmony export */ });\n/* harmony import */ var _utils_detect_platform_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/detect-platform.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/utils/detect-platform.js\");\n/* harmony import */ var _utils_json_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/json.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/utils/json.js\");\n/* harmony import */ var _upload_helpers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./upload/helpers.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/storage/upload/helpers.js\");\n\n\n\n/**\n * Uploads files based on the provided options.\n * @param options - The upload options.\n * @returns A promise that resolves to the uploaded file URI or URIs (when passing multiple files).\n * @throws An error if the upload fails.\n * @example\n * ```ts\n * import { upload } from \"thirdweb/storage\";\n * const uri = await upload({\n *  client,\n *  files: [\n *    new File([\"hello world\"], \"hello.txt\"),\n *  ],\n * });\n * ```\n * @storage\n */ async function upload(options) {\n    // deal with the differnt file types\n    // if there are no files, return an empty array immediately\n    if (options.files.length === 0) {\n        return null;\n    }\n    // handle file arrays\n    const isFileArray = options.files.map((item)=>(0,_upload_helpers_js__WEBPACK_IMPORTED_MODULE_0__.isFileOrUint8Array)(item) || typeof item === \"string\").every((item)=>!!item);\n    let uris;\n    if (isFileArray) {\n        // if we already have an array of files, we can just pass it through\n        uris = options.files;\n    } else {\n        // otherwise we have to process them first\n        let cleaned = options.files;\n        // Replace any gateway URLs with their hashes\n        cleaned = (0,_upload_helpers_js__WEBPACK_IMPORTED_MODULE_0__.replaceObjectGatewayUrlsWithSchemes)(cleaned);\n        // Recurse through data and extract files to upload\n        const files = (0,_upload_helpers_js__WEBPACK_IMPORTED_MODULE_0__.extractObjectFiles)(cleaned);\n        if (files.length) {\n            // Upload all files that came from the object\n            const uris_ = await upload({\n                ...options,\n                files\n            });\n            // Recurse through data and replace files with hashes\n            cleaned = (0,_upload_helpers_js__WEBPACK_IMPORTED_MODULE_0__.replaceObjectFilesWithUris)(cleaned, // always pass an array even if the underlying upload returns a single uri\n            Array.isArray(uris_) ? uris_ : [\n                uris_\n            ]);\n        }\n        uris = cleaned.map((item)=>{\n            if (typeof item === \"string\") {\n                return item;\n            }\n            return (0,_utils_json_js__WEBPACK_IMPORTED_MODULE_1__.stringify)(item);\n        });\n    }\n    // end deal with the differnt file types\n    const form_ = new FormData();\n    const { fileNames, form } = (0,_upload_helpers_js__WEBPACK_IMPORTED_MODULE_0__.buildFormData)(form_, uris, options);\n    const platform = (0,_utils_detect_platform_js__WEBPACK_IMPORTED_MODULE_2__.detectPlatform)();\n    if (platform === \"browser\" || platform === \"node\") {\n        const { uploadBatch } = await __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_thirdweb_dist_esm_storage_upload_web-node_js\").then(__webpack_require__.bind(__webpack_require__, /*! ./upload/web-node.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/storage/upload/web-node.js\"));\n        const uris = await uploadBatch(options.client, form, fileNames, options);\n        // if we only passed a single file, return its URI directly\n        if (options.files.length === 1) {\n            return uris[0];\n        }\n        return uris;\n    }\n    throw new Error(\"Please, use the uploadMobile function in mobile environments.\");\n} //# sourceMappingURL=upload.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy90aGlyZHdlYi9kaXN0L2VzbS9zdG9yYWdlL3VwbG9hZC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQTZEO0FBQ2hCO0FBQ2lIO0FBQzlKOzs7Ozs7Ozs7Ozs7Ozs7O0NBZ0JDLEdBQ00sZUFBZU8sT0FBT0MsT0FBTztJQUNoQyxvQ0FBb0M7SUFDcEMsMkRBQTJEO0lBQzNELElBQUlBLFFBQVFDLEtBQUssQ0FBQ0MsTUFBTSxLQUFLLEdBQUc7UUFDNUIsT0FBTztJQUNYO0lBQ0EscUJBQXFCO0lBQ3JCLE1BQU1DLGNBQWNILFFBQVFDLEtBQUssQ0FDNUJHLEdBQUcsQ0FBQyxDQUFDQyxPQUFTVCxzRUFBa0JBLENBQUNTLFNBQVMsT0FBT0EsU0FBUyxVQUMxREMsS0FBSyxDQUFDLENBQUNELE9BQVMsQ0FBQyxDQUFDQTtJQUN2QixJQUFJRTtJQUNKLElBQUlKLGFBQWE7UUFDYixvRUFBb0U7UUFDcEVJLE9BQU9QLFFBQVFDLEtBQUs7SUFDeEIsT0FDSztRQUNELDBDQUEwQztRQUMxQyxJQUFJTyxVQUFVUixRQUFRQyxLQUFLO1FBQzNCLDZDQUE2QztRQUM3Q08sVUFBVVYsdUZBQW1DQSxDQUFDVTtRQUM5QyxtREFBbUQ7UUFDbkQsTUFBTVAsUUFBUU4sc0VBQWtCQSxDQUFDYTtRQUNqQyxJQUFJUCxNQUFNQyxNQUFNLEVBQUU7WUFDZCw2Q0FBNkM7WUFDN0MsTUFBTU8sUUFBUSxNQUFNVixPQUFPO2dCQUFFLEdBQUdDLE9BQU87Z0JBQUVDO1lBQU07WUFDL0MscURBQXFEO1lBQ3JETyxVQUFVWCw4RUFBMEJBLENBQUNXLFNBQ3JDLDBFQUEwRTtZQUMxRUUsTUFBTUMsT0FBTyxDQUFDRixTQUFTQSxRQUFRO2dCQUFDQTthQUFNO1FBQzFDO1FBQ0FGLE9BQU9DLFFBQVFKLEdBQUcsQ0FBQyxDQUFDQztZQUNoQixJQUFJLE9BQU9BLFNBQVMsVUFBVTtnQkFDMUIsT0FBT0E7WUFDWDtZQUNBLE9BQU9aLHlEQUFTQSxDQUFDWTtRQUNyQjtJQUNKO0lBQ0Esd0NBQXdDO0lBQ3hDLE1BQU1PLFFBQVEsSUFBSUM7SUFDbEIsTUFBTSxFQUFFQyxTQUFTLEVBQUVDLElBQUksRUFBRSxHQUFHckIsaUVBQWFBLENBQUNrQixPQUFPTCxNQUFNUDtJQUN2RCxNQUFNZ0IsV0FBV3hCLHlFQUFjQTtJQUMvQixJQUFJd0IsYUFBYSxhQUFhQSxhQUFhLFFBQVE7UUFDL0MsTUFBTSxFQUFFQyxXQUFXLEVBQUUsR0FBRyxNQUFNLHdSQUE4QjtRQUM1RCxNQUFNVixPQUFPLE1BQU1VLFlBQVlqQixRQUFRa0IsTUFBTSxFQUFFSCxNQUFNRCxXQUFXZDtRQUNoRSwyREFBMkQ7UUFDM0QsSUFBSUEsUUFBUUMsS0FBSyxDQUFDQyxNQUFNLEtBQUssR0FBRztZQUM1QixPQUFPSyxJQUFJLENBQUMsRUFBRTtRQUNsQjtRQUNBLE9BQU9BO0lBQ1g7SUFDQSxNQUFNLElBQUlZLE1BQU07QUFDcEIsRUFDQSxrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3RoaXJkd2ViL2Rpc3QvZXNtL3N0b3JhZ2UvdXBsb2FkLmpzPzIwNDciXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZGV0ZWN0UGxhdGZvcm0gfSBmcm9tIFwiLi4vdXRpbHMvZGV0ZWN0LXBsYXRmb3JtLmpzXCI7XG5pbXBvcnQgeyBzdHJpbmdpZnkgfSBmcm9tIFwiLi4vdXRpbHMvanNvbi5qc1wiO1xuaW1wb3J0IHsgYnVpbGRGb3JtRGF0YSwgZXh0cmFjdE9iamVjdEZpbGVzLCBpc0ZpbGVPclVpbnQ4QXJyYXksIHJlcGxhY2VPYmplY3RGaWxlc1dpdGhVcmlzLCByZXBsYWNlT2JqZWN0R2F0ZXdheVVybHNXaXRoU2NoZW1lcywgfSBmcm9tIFwiLi91cGxvYWQvaGVscGVycy5qc1wiO1xuLyoqXG4gKiBVcGxvYWRzIGZpbGVzIGJhc2VkIG9uIHRoZSBwcm92aWRlZCBvcHRpb25zLlxuICogQHBhcmFtIG9wdGlvbnMgLSBUaGUgdXBsb2FkIG9wdGlvbnMuXG4gKiBAcmV0dXJucyBBIHByb21pc2UgdGhhdCByZXNvbHZlcyB0byB0aGUgdXBsb2FkZWQgZmlsZSBVUkkgb3IgVVJJcyAod2hlbiBwYXNzaW5nIG11bHRpcGxlIGZpbGVzKS5cbiAqIEB0aHJvd3MgQW4gZXJyb3IgaWYgdGhlIHVwbG9hZCBmYWlscy5cbiAqIEBleGFtcGxlXG4gKiBgYGB0c1xuICogaW1wb3J0IHsgdXBsb2FkIH0gZnJvbSBcInRoaXJkd2ViL3N0b3JhZ2VcIjtcbiAqIGNvbnN0IHVyaSA9IGF3YWl0IHVwbG9hZCh7XG4gKiAgY2xpZW50LFxuICogIGZpbGVzOiBbXG4gKiAgICBuZXcgRmlsZShbXCJoZWxsbyB3b3JsZFwiXSwgXCJoZWxsby50eHRcIiksXG4gKiAgXSxcbiAqIH0pO1xuICogYGBgXG4gKiBAc3RvcmFnZVxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gdXBsb2FkKG9wdGlvbnMpIHtcbiAgICAvLyBkZWFsIHdpdGggdGhlIGRpZmZlcm50IGZpbGUgdHlwZXNcbiAgICAvLyBpZiB0aGVyZSBhcmUgbm8gZmlsZXMsIHJldHVybiBhbiBlbXB0eSBhcnJheSBpbW1lZGlhdGVseVxuICAgIGlmIChvcHRpb25zLmZpbGVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgLy8gaGFuZGxlIGZpbGUgYXJyYXlzXG4gICAgY29uc3QgaXNGaWxlQXJyYXkgPSBvcHRpb25zLmZpbGVzXG4gICAgICAgIC5tYXAoKGl0ZW0pID0+IGlzRmlsZU9yVWludDhBcnJheShpdGVtKSB8fCB0eXBlb2YgaXRlbSA9PT0gXCJzdHJpbmdcIilcbiAgICAgICAgLmV2ZXJ5KChpdGVtKSA9PiAhIWl0ZW0pO1xuICAgIGxldCB1cmlzO1xuICAgIGlmIChpc0ZpbGVBcnJheSkge1xuICAgICAgICAvLyBpZiB3ZSBhbHJlYWR5IGhhdmUgYW4gYXJyYXkgb2YgZmlsZXMsIHdlIGNhbiBqdXN0IHBhc3MgaXQgdGhyb3VnaFxuICAgICAgICB1cmlzID0gb3B0aW9ucy5maWxlcztcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIC8vIG90aGVyd2lzZSB3ZSBoYXZlIHRvIHByb2Nlc3MgdGhlbSBmaXJzdFxuICAgICAgICBsZXQgY2xlYW5lZCA9IG9wdGlvbnMuZmlsZXM7XG4gICAgICAgIC8vIFJlcGxhY2UgYW55IGdhdGV3YXkgVVJMcyB3aXRoIHRoZWlyIGhhc2hlc1xuICAgICAgICBjbGVhbmVkID0gcmVwbGFjZU9iamVjdEdhdGV3YXlVcmxzV2l0aFNjaGVtZXMoY2xlYW5lZCk7XG4gICAgICAgIC8vIFJlY3Vyc2UgdGhyb3VnaCBkYXRhIGFuZCBleHRyYWN0IGZpbGVzIHRvIHVwbG9hZFxuICAgICAgICBjb25zdCBmaWxlcyA9IGV4dHJhY3RPYmplY3RGaWxlcyhjbGVhbmVkKTtcbiAgICAgICAgaWYgKGZpbGVzLmxlbmd0aCkge1xuICAgICAgICAgICAgLy8gVXBsb2FkIGFsbCBmaWxlcyB0aGF0IGNhbWUgZnJvbSB0aGUgb2JqZWN0XG4gICAgICAgICAgICBjb25zdCB1cmlzXyA9IGF3YWl0IHVwbG9hZCh7IC4uLm9wdGlvbnMsIGZpbGVzIH0pO1xuICAgICAgICAgICAgLy8gUmVjdXJzZSB0aHJvdWdoIGRhdGEgYW5kIHJlcGxhY2UgZmlsZXMgd2l0aCBoYXNoZXNcbiAgICAgICAgICAgIGNsZWFuZWQgPSByZXBsYWNlT2JqZWN0RmlsZXNXaXRoVXJpcyhjbGVhbmVkLCBcbiAgICAgICAgICAgIC8vIGFsd2F5cyBwYXNzIGFuIGFycmF5IGV2ZW4gaWYgdGhlIHVuZGVybHlpbmcgdXBsb2FkIHJldHVybnMgYSBzaW5nbGUgdXJpXG4gICAgICAgICAgICBBcnJheS5pc0FycmF5KHVyaXNfKSA/IHVyaXNfIDogW3VyaXNfXSk7XG4gICAgICAgIH1cbiAgICAgICAgdXJpcyA9IGNsZWFuZWQubWFwKChpdGVtKSA9PiB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGl0ZW0gPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXRlbTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBzdHJpbmdpZnkoaXRlbSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvLyBlbmQgZGVhbCB3aXRoIHRoZSBkaWZmZXJudCBmaWxlIHR5cGVzXG4gICAgY29uc3QgZm9ybV8gPSBuZXcgRm9ybURhdGEoKTtcbiAgICBjb25zdCB7IGZpbGVOYW1lcywgZm9ybSB9ID0gYnVpbGRGb3JtRGF0YShmb3JtXywgdXJpcywgb3B0aW9ucyk7XG4gICAgY29uc3QgcGxhdGZvcm0gPSBkZXRlY3RQbGF0Zm9ybSgpO1xuICAgIGlmIChwbGF0Zm9ybSA9PT0gXCJicm93c2VyXCIgfHwgcGxhdGZvcm0gPT09IFwibm9kZVwiKSB7XG4gICAgICAgIGNvbnN0IHsgdXBsb2FkQmF0Y2ggfSA9IGF3YWl0IGltcG9ydChcIi4vdXBsb2FkL3dlYi1ub2RlLmpzXCIpO1xuICAgICAgICBjb25zdCB1cmlzID0gYXdhaXQgdXBsb2FkQmF0Y2gob3B0aW9ucy5jbGllbnQsIGZvcm0sIGZpbGVOYW1lcywgb3B0aW9ucyk7XG4gICAgICAgIC8vIGlmIHdlIG9ubHkgcGFzc2VkIGEgc2luZ2xlIGZpbGUsIHJldHVybiBpdHMgVVJJIGRpcmVjdGx5XG4gICAgICAgIGlmIChvcHRpb25zLmZpbGVzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgcmV0dXJuIHVyaXNbMF07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVyaXM7XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcihcIlBsZWFzZSwgdXNlIHRoZSB1cGxvYWRNb2JpbGUgZnVuY3Rpb24gaW4gbW9iaWxlIGVudmlyb25tZW50cy5cIik7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD11cGxvYWQuanMubWFwIl0sIm5hbWVzIjpbImRldGVjdFBsYXRmb3JtIiwic3RyaW5naWZ5IiwiYnVpbGRGb3JtRGF0YSIsImV4dHJhY3RPYmplY3RGaWxlcyIsImlzRmlsZU9yVWludDhBcnJheSIsInJlcGxhY2VPYmplY3RGaWxlc1dpdGhVcmlzIiwicmVwbGFjZU9iamVjdEdhdGV3YXlVcmxzV2l0aFNjaGVtZXMiLCJ1cGxvYWQiLCJvcHRpb25zIiwiZmlsZXMiLCJsZW5ndGgiLCJpc0ZpbGVBcnJheSIsIm1hcCIsIml0ZW0iLCJldmVyeSIsInVyaXMiLCJjbGVhbmVkIiwidXJpc18iLCJBcnJheSIsImlzQXJyYXkiLCJmb3JtXyIsIkZvcm1EYXRhIiwiZmlsZU5hbWVzIiwiZm9ybSIsInBsYXRmb3JtIiwidXBsb2FkQmF0Y2giLCJjbGllbnQiLCJFcnJvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/thirdweb/dist/esm/storage/upload.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/thirdweb/dist/esm/storage/upload/helpers.js":
/*!******************************************************************!*\
  !*** ./node_modules/thirdweb/dist/esm/storage/upload/helpers.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   buildFormData: function() { return /* binding */ buildFormData; },\n/* harmony export */   extractObjectFiles: function() { return /* binding */ extractObjectFiles; },\n/* harmony export */   isFileBufferOrStringEqual: function() { return /* binding */ isFileBufferOrStringEqual; },\n/* harmony export */   isFileOrUint8Array: function() { return /* binding */ isFileOrUint8Array; },\n/* harmony export */   replaceGatewayUrlWithScheme: function() { return /* binding */ replaceGatewayUrlWithScheme; },\n/* harmony export */   replaceObjectFilesWithUris: function() { return /* binding */ replaceObjectFilesWithUris; },\n/* harmony export */   replaceObjectGatewayUrlsWithSchemes: function() { return /* binding */ replaceObjectGatewayUrlsWithSchemes; }\n/* harmony export */ });\n/* harmony import */ var _utils_type_guards_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/type-guards.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/utils/type-guards.js\");\n/* harmony import */ var _utils_uint8_array_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/uint8-array.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/utils/uint8-array.js\");\n\n\n/**\n * @internal\n */ function isFileInstance(data) {\n    return globalThis.File && data instanceof File;\n}\n/**\n * @internal\n */ function isBufferOrStringWithName(data) {\n    if (!data) {\n        return false;\n    }\n    if (!(0,_utils_type_guards_js__WEBPACK_IMPORTED_MODULE_0__.isObjectWithKeys)(data, [\n        \"data\",\n        \"name\"\n    ])) {\n        return false;\n    }\n    return !!(typeof data.name === \"string\" && (typeof data.data === \"string\" || (0,_utils_uint8_array_js__WEBPACK_IMPORTED_MODULE_1__.isUint8Array)(data.data)));\n}\nfunction isFileBufferOrStringEqual(input1, input2) {\n    if (isFileInstance(input1) && isFileInstance(input2)) {\n        // if both are File types, compare the name, size, and last modified date (best guess that these are the same files)\n        if (input1.name === input2.name && input1.lastModified === input2.lastModified && input1.size === input2.size) {\n            return true;\n        }\n    } else if ((0,_utils_uint8_array_js__WEBPACK_IMPORTED_MODULE_1__.isUint8Array)(input1) && (0,_utils_uint8_array_js__WEBPACK_IMPORTED_MODULE_1__.isUint8Array)(input2)) {\n        // buffer gives us an easy way to compare the contents!\n        return (0,_utils_uint8_array_js__WEBPACK_IMPORTED_MODULE_1__.areUint8ArraysEqual)(input1, input2);\n    } else if (isBufferOrStringWithName(input1) && isBufferOrStringWithName(input2)) {\n        // first check the names\n        if (input1.name === input2.name) {\n            // if the data for both is a string, compare the strings\n            if (typeof input1.data === \"string\" && typeof input2.data === \"string\") {\n                return input1.data === input2.data;\n            }\n            if ((0,_utils_uint8_array_js__WEBPACK_IMPORTED_MODULE_1__.isUint8Array)(input1.data) && (0,_utils_uint8_array_js__WEBPACK_IMPORTED_MODULE_1__.isUint8Array)(input2.data)) {\n                // otherwise we know it's buffers, so compare the buffers\n                return (0,_utils_uint8_array_js__WEBPACK_IMPORTED_MODULE_1__.areUint8ArraysEqual)(input1.data, input2.data);\n            }\n        }\n    }\n    // otherwise if we have not found a match, return false\n    return false;\n}\nfunction buildFormData(form, files, options) {\n    const fileNameToFileMap = new Map();\n    const fileNames = [];\n    for(let i = 0; i < files.length; i++){\n        // biome-ignore lint/style/noNonNullAssertion: we know that files[i] is not null or undefined because we are iterating over the array\n        const file = files[i];\n        let fileName = \"\";\n        let fileData = file;\n        if (isFileInstance(file)) {\n            if (options === null || options === void 0 ? void 0 : options.rewriteFileNames) {\n                let extensions = \"\";\n                if (file.name) {\n                    const extensionStartIndex = file.name.lastIndexOf(\".\");\n                    if (extensionStartIndex > -1) {\n                        extensions = file.name.substring(extensionStartIndex);\n                    }\n                }\n                fileName = \"\".concat(i + options.rewriteFileNames.fileStartNumber).concat(extensions);\n            } else {\n                fileName = \"\".concat(file.name);\n            }\n        } else if (isBufferOrStringWithName(file)) {\n            fileData = file.data;\n            if (options === null || options === void 0 ? void 0 : options.rewriteFileNames) {\n                fileName = \"\".concat(i + options.rewriteFileNames.fileStartNumber);\n            } else {\n                fileName = \"\".concat(file.name);\n            }\n        } else {\n            if (options === null || options === void 0 ? void 0 : options.rewriteFileNames) {\n                fileName = \"\".concat(i + options.rewriteFileNames.fileStartNumber);\n            } else {\n                fileName = \"\".concat(i);\n            }\n        }\n        // If we don't want to wrap with directory, adjust the filepath\n        const filepath = (options === null || options === void 0 ? void 0 : options.uploadWithoutDirectory) ? \"files\" : \"files/\".concat(fileName);\n        if (fileNameToFileMap.has(fileName)) {\n            // if the file in the map is the same as the file we are already looking at then just skip and continue\n            if (isFileBufferOrStringEqual(fileNameToFileMap.get(fileName), file)) {\n                // we add it to the filenames array so that we can return the correct number of urls,\n                fileNames.push(fileName);\n                continue;\n            }\n            // otherwise if file names are the same but they are not the same file then we should throw an error (trying to upload to differnt files but with the same names)\n            throw new Error(\"[DUPLICATE_FILE_NAME_ERROR] File name \".concat(fileName, \" was passed for more than one different file.\"));\n        }\n        // add it to the map so that we can check for duplicates\n        fileNameToFileMap.set(fileName, file);\n        // add it to the filenames array so that we can return the correct number of urls\n        fileNames.push(fileName);\n        form.append(\"file\", new Blob([\n            fileData\n        ]), filepath);\n    }\n    const metadata = {\n        name: \"Storage SDK\",\n        keyvalues: {\n            ...options === null || options === void 0 ? void 0 : options.metadata\n        }\n    };\n    form.append(\"pinataMetadata\", JSON.stringify(metadata));\n    if (options === null || options === void 0 ? void 0 : options.uploadWithoutDirectory) {\n        form.append(\"pinataOptions\", JSON.stringify({\n            wrapWithDirectory: false\n        }));\n    }\n    return {\n        form,\n        // encode the file names on the way out (which is what the upload backend expects)\n        fileNames: fileNames.map((fName)=>encodeURIComponent(fName))\n    };\n}\nfunction isFileOrUint8Array(data) {\n    return isFileInstance(data) || (0,_utils_uint8_array_js__WEBPACK_IMPORTED_MODULE_1__.isUint8Array)(data) || isBufferOrStringWithName(data);\n}\n/**\n * @internal\n */ function extractObjectFiles(data) {\n    let files = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];\n    // If item is a FileOrBuffer add it to our list of files\n    if (isFileOrUint8Array(data)) {\n        files.push(data);\n        return files;\n    }\n    if (typeof data === \"object\") {\n        if (!data) {\n            return files;\n        }\n        if (Array.isArray(data)) {\n            for (const entry of data){\n                extractObjectFiles(entry, files);\n            }\n        } else {\n            Object.keys(data).map((key)=>extractObjectFiles(data[key], files));\n        }\n    }\n    return files;\n}\n/**\n * @internal\n */ function replaceObjectFilesWithUris(data, uris) {\n    if (isFileOrUint8Array(data)) {\n        if (uris.length) {\n            return uris.shift();\n        }\n        console.warn(\"Not enough URIs to replace all files in object.\");\n    }\n    if (typeof data === \"object\") {\n        if (!data) {\n            return data;\n        }\n        if (Array.isArray(data)) {\n            return data.map((entry)=>replaceObjectFilesWithUris(entry, uris));\n        }\n        return Object.fromEntries(Object.entries(data).map((param)=>{\n            let [key, value] = param;\n            return [\n                key,\n                replaceObjectFilesWithUris(value, uris)\n            ];\n        }));\n    }\n    return data;\n}\n/**\n * @internal\n */ function replaceGatewayUrlWithScheme(url) {\n    if (url.includes(\"/ipfs/\")) {\n        const hash = url.split(\"/ipfs/\")[1];\n        return \"ipfs://\".concat(hash);\n    }\n    return url;\n}\n/**\n * @internal\n */ function replaceObjectGatewayUrlsWithSchemes(data) {\n    if (typeof data === \"string\") {\n        return replaceGatewayUrlWithScheme(data);\n    }\n    if (typeof data === \"object\") {\n        if (!data) {\n            return data;\n        }\n        if (isFileOrUint8Array(data)) {\n            return data;\n        }\n        if (Array.isArray(data)) {\n            return data.map((entry)=>replaceObjectGatewayUrlsWithSchemes(entry));\n        }\n        return Object.fromEntries(Object.entries(data).map((param)=>{\n            let [key, value] = param;\n            return [\n                key,\n                replaceObjectGatewayUrlsWithSchemes(value)\n            ];\n        }));\n    }\n    return data;\n} //# sourceMappingURL=helpers.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/thirdweb/dist/esm/storage/upload/helpers.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/thirdweb/dist/esm/utils/uint8-array.js":
/*!*************************************************************!*\
  !*** ./node_modules/thirdweb/dist/esm/utils/uint8-array.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   areUint8ArraysEqual: function() { return /* binding */ areUint8ArraysEqual; },\n/* harmony export */   base64ToString: function() { return /* binding */ base64ToString; },\n/* harmony export */   base64ToUint8Array: function() { return /* binding */ base64ToUint8Array; },\n/* harmony export */   compareUint8Arrays: function() { return /* binding */ compareUint8Arrays; },\n/* harmony export */   concatUint8Arrays: function() { return /* binding */ concatUint8Arrays; },\n/* harmony export */   isUint8Array: function() { return /* binding */ isUint8Array; },\n/* harmony export */   uint8ArrayToBase64: function() { return /* binding */ uint8ArrayToBase64; },\n/* harmony export */   uint8ArrayToString: function() { return /* binding */ uint8ArrayToString; }\n/* harmony export */ });\n/* harmony import */ var _text_decoder_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./text-decoder.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/utils/text-decoder.js\");\n\nconst uint8ArrayStringified = \"[object Uint8Array]\";\n/**\n * Throw a `TypeError` if the given value is not an instance of `Uint8Array`.\n * @example\n * ```ts\n * import {assertUint8Array} from 'uint8array-extras';\n *\n * try {\n * assertUint8Array(new ArrayBuffer(10)); // Throws a TypeError\n * } catch (error) {\n * console.error(error.message);\n * }\n * ```\n */ function assertUint8Array(value) {\n    if (!isUint8Array(value)) {\n        throw new TypeError(\"Expected `Uint8Array`, got `\".concat(typeof value, \"`\"));\n    }\n}\n/**\n * Check if the given value is an instance of `Uint8Array`.\n *\n * Replacement for [`Buffer.isBuffer()`](https://nodejs.org/api/buffer.html#static-method-bufferisbufferobj).\n * @example\n * ```ts\n * import {isUint8Array} from 'uint8array-extras';\n *\n * console.log(isUint8Array(new Uint8Array()));\n * //=> true\n *\n * console.log(isUint8Array(Buffer.from('x')));\n * //=> true\n *\n * console.log(isUint8Array(new ArrayBuffer(10)));\n * //=> false\n * ```\n */ function isUint8Array(value) {\n    if (!value) {\n        return false;\n    }\n    if (value.constructor === Uint8Array) {\n        return true;\n    }\n    return Object.prototype.toString.call(value) === uint8ArrayStringified;\n}\n/**\n * Check if two arrays are identical by verifying that they contain the same bytes in the same sequence.\n *\n * Replacement for [`Buffer#equals()`](https://nodejs.org/api/buffer.html#bufequalsotherbuffer).\n * @example\n * ```ts\n * import {areUint8ArraysEqual} from 'uint8array-extras';\n *\n * const a = new Uint8Array([1, 2, 3]);\n * const b = new Uint8Array([1, 2, 3]);\n * const c = new Uint8Array([4, 5, 6]);\n *\n * console.log(areUint8ArraysEqual(a, b));\n * //=> true\n *\n * console.log(areUint8ArraysEqual(a, c));\n * //=> false\n * ```\n */ function areUint8ArraysEqual(a, b) {\n    assertUint8Array(a);\n    assertUint8Array(b);\n    if (a === b) {\n        return true;\n    }\n    if (a.length !== b.length) {\n        return false;\n    }\n    for(let index = 0; index < a.length; index++){\n        if (a[index] !== b[index]) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * Convert a `Uint8Array` (containing a UTF-8 string) to a string.\n *\n * Replacement for [`Buffer#toString()`](https://nodejs.org/api/buffer.html#buftostringencoding-start-end).\n * @example\n * ```ts\n * import {uint8ArrayToString} from 'uint8array-extras';\n *\n * const byteArray = new Uint8Array([72, 101, 108, 108, 111]);\n *\n * console.log(uint8ArrayToString(byteArray));\n * //=> 'Hello'\n * ```\n */ function uint8ArrayToString(array) {\n    assertUint8Array(array);\n    return (0,_text_decoder_js__WEBPACK_IMPORTED_MODULE_0__.cachedTextDecoder)().decode(array);\n}\nfunction assertString(value) {\n    if (typeof value !== \"string\") {\n        throw new TypeError(\"Expected `string`, got `\".concat(typeof value, \"`\"));\n    }\n}\nfunction base64UrlToBase64(base64url) {\n    return base64url.replaceAll(\"-\", \"+\").replaceAll(\"_\", \"/\");\n}\n/**\n * Convert a Base64-encoded or [Base64URL](https://base64.guru/standards/base64url)-encoded string to a `Uint8Array`.\n *\n * Replacement for [`Buffer.from('SGVsbG8=', 'base64')`](https://nodejs.org/api/buffer.html#static-method-bufferfromstring-encoding).\n * @example\n * ```ts\n * import {base64ToUint8Array} from 'uint8array-extras';\n *\n * console.log(base64ToUint8Array('SGVsbG8='));\n * //=> Uint8Array [72, 101, 108, 108, 111]\n * ```\n */ function base64ToUint8Array(base64String) {\n    assertString(base64String);\n    return Uint8Array.from(globalThis.atob(base64UrlToBase64(base64String)), // biome-ignore lint/style/noNonNullAssertion: we know that the code points exist\n    (x)=>x.codePointAt(0));\n}\n/**\n * Decode a Base64-encoded or [Base64URL](https://base64.guru/standards/base64url)-encoded string to a string.\n *\n * Replacement for `Buffer.from('SGVsbG8=', 'base64').toString()` and [`atob()`](https://developer.mozilla.org/en-US/docs/Web/API/atob).\n * @example\n * ```ts\n * import {base64ToString} from 'uint8array-extras';\n *\n * console.log(base64ToString('SGVsbG8='));\n * //=> 'Hello'\n * ```\n */ function base64ToString(base64String) {\n    assertString(base64String);\n    return uint8ArrayToString(base64ToUint8Array(base64String));\n}\nfunction base64ToBase64Url(base64) {\n    return base64.replaceAll(\"+\", \"-\").replaceAll(\"/\", \"_\").replace(/=+$/, \"\");\n}\n// Reference: https://phuoc.ng/collection/this-vs-that/concat-vs-push/\nconst MAX_BLOCK_SIZE = 65535;\nfunction uint8ArrayToBase64(array) {\n    let { urlSafe = false } = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    assertUint8Array(array);\n    let base64;\n    if (array.length < MAX_BLOCK_SIZE) {\n        // Required as `btoa` and `atob` don't properly support Unicode: https://developer.mozilla.org/en-US/docs/Glossary/Base64#the_unicode_problem\n        // @ts-expect-error - TS doesn't know about `String#fromCodePoint`\n        base64 = globalThis.btoa(String.fromCodePoint.apply(this, array));\n    } else {\n        base64 = \"\";\n        for (const value of array){\n            base64 += String.fromCodePoint(value);\n        }\n        base64 = globalThis.btoa(base64);\n    }\n    return urlSafe ? base64ToBase64Url(base64) : base64;\n}\nfunction concatUint8Arrays(arrays, totalLength) {\n    if (arrays.length === 0) {\n        return new Uint8Array(0);\n    }\n    const calculatedTotalLength = totalLength !== null && totalLength !== void 0 ? totalLength : arrays.reduce((accumulator, currentValue)=>accumulator + currentValue.length, 0);\n    const returnValue = new Uint8Array(calculatedTotalLength);\n    let offset = 0;\n    for (const array of arrays){\n        assertUint8Array(array);\n        returnValue.set(array, offset);\n        offset += array.length;\n    }\n    return returnValue;\n}\nfunction compareUint8Arrays(a, b) {\n    assertUint8Array(a);\n    assertUint8Array(b);\n    const length = Math.min(a.length, b.length);\n    for(let index = 0; index < length; index++){\n        // biome-ignore lint/style/noNonNullAssertion: we check the length above so the index is always in bounds\n        const diff = a[index] - b[index];\n        if (diff !== 0) {\n            return Math.sign(diff);\n        }\n    }\n    // At this point, all the compared elements are equal.\n    // The shorter array should come first if the arrays are of different lengths.\n    return Math.sign(a.length - b.length);\n} //# sourceMappingURL=uint8-array.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/thirdweb/dist/esm/utils/uint8-array.js\n"));

/***/ })

}]);